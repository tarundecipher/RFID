
rfidarduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800200  000022de  00002372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  00800370  00800370  000024e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d0  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000143f4  00000000  00000000  00002d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f29  00000000  00000000  00017118  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c56  00000000  00000000  0001a041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001da0  00000000  00000000  0001ec98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040e6  00000000  00000000  00020a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c50f  00000000  00000000  00024b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000850  00000000  00000000  0003102d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	68 c6       	rjmp	.+3280   	; 0xd2e <__vector_23>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	17 c5       	rjmp	.+2606   	; 0xa94 <__vector_25>
      66:	00 00       	nop
      68:	4b c5       	rjmp	.+2710   	; 0xb00 <__vector_26>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c1       	rjmp	.+514    	; 0x28c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	db c0       	rjmp	.+438    	; 0x28c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	21 0e       	add	r2, r17
      e6:	24 0e       	add	r2, r20
      e8:	13 0e       	add	r1, r19
      ea:	17 0e       	add	r1, r23
      ec:	1d 0e       	add	r1, r29
      ee:	5b 0e       	add	r5, r27
      f0:	28 0e       	add	r2, r24
      f2:	2c 0e       	add	r2, r28
      f4:	32 0e       	add	r3, r18
      f6:	36 0e       	add	r3, r22
      f8:	3a 0e       	add	r3, r26
      fa:	40 0e       	add	r4, r16
      fc:	44 0e       	add	r4, r20
      fe:	48 0e       	add	r4, r24
     100:	5b 0e       	add	r5, r27
     102:	4e 0e       	add	r4, r30
     104:	52 0e       	add	r5, r18
     106:	56 0e       	add	r5, r22

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	90 01       	movw	r18, r0
     22a:	b2 05       	cpc	r27, r2

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d1 e2       	ldi	r29, 0x21	; 33
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
     23c:	13 e0       	ldi	r17, 0x03	; 3
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b2 e0       	ldi	r27, 0x02	; 2
     242:	ee ed       	ldi	r30, 0xDE	; 222
     244:	f2 e2       	ldi	r31, 0x22	; 34
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	0b bf       	out	0x3b, r16	; 59
     24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
     24c:	07 90       	elpm	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	a0 37       	cpi	r26, 0x70	; 112
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
     256:	24 e0       	ldi	r18, 0x04	; 4
     258:	a0 e7       	ldi	r26, 0x70	; 112
     25a:	b3 e0       	ldi	r27, 0x03	; 3
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ae 32       	cpi	r26, 0x2E	; 46
     262:	b2 07       	cpc	r27, r18
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	c6 e1       	ldi	r28, 0x16	; 22
     26a:	d1 e0       	ldi	r29, 0x01	; 1
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	06 c0       	rjmp	.+12     	; 0x27c <__do_global_ctors+0x16>
     270:	21 97       	sbiw	r28, 0x01	; 1
     272:	01 09       	sbc	r16, r1
     274:	80 2f       	mov	r24, r16
     276:	fe 01       	movw	r30, r28
     278:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__tablejump2__>
     27c:	c4 31       	cpi	r28, 0x14	; 20
     27e:	d1 07       	cpc	r29, r17
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 07       	cpc	r16, r24
     284:	a9 f7       	brne	.-22     	; 0x270 <__do_global_ctors+0xa>
     286:	9c d4       	rcall	.+2360   	; 0xbc0 <main>
     288:	0c 94 6d 11 	jmp	0x22da	; 0x22da <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <_ZNK6String9substringEj>:
	while ( !(UCSR1A & (1<<RXC1)) );

		/* Get and return received data from buffer */
		return UDR1;

}
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	ec 01       	movw	r28, r24
     294:	fb 01       	movw	r30, r22
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	6f d7       	rcall	.+3806   	; 0x117a <_ZNK6String9substringEjj>
     29c:	ce 01       	movw	r24, r28
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <_Z10USART_Initv>:
     2a4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     2a8:	83 e3       	ldi	r24, 0x33	; 51
     2aa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     2ae:	e9 ec       	ldi	r30, 0xC9	; 201
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	88 61       	ori	r24, 0x18	; 24
     2b6:	80 83       	st	Z, r24
     2b8:	ea ec       	ldi	r30, 0xCA	; 202
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	8e 60       	ori	r24, 0x0E	; 14
     2c0:	80 83       	st	Z, r24
     2c2:	08 95       	ret

000002c4 <_Z14USART_Transmith>:
     2c4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <_Z14USART_Transmith>
     2cc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     2d0:	08 95       	ret

000002d2 <_Z11Send_StringPc>:
//End of Auto generated function prototypes by Atmel Studio
#include"USART.h"

#include <util/delay.h>

void Send_String(char ar[]){
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	ec 01       	movw	r28, r24
	int i;
	i=0;
	while(ar[i]!='\0'){
     2d8:	89 91       	ld	r24, Y+
     2da:	88 23       	and	r24, r24
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <_Z11Send_StringPc+0x10>
		USART_Transmit(ar[i]);
     2de:	f2 df       	rcall	.-28     	; 0x2c4 <_Z14USART_Transmith>
#include <util/delay.h>

void Send_String(char ar[]){
	int i;
	i=0;
	while(ar[i]!='\0'){
     2e0:	fb cf       	rjmp	.-10     	; 0x2d8 <_Z11Send_StringPc+0x6>
		USART_Transmit(ar[i]);
		i++;
	}
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <setup>:
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
 
void setup() 
{	DDRG |= (1<<5)|(1<<1);
     2e8:	83 b3       	in	r24, 0x13	; 19
     2ea:	82 62       	ori	r24, 0x22	; 34
     2ec:	83 bb       	out	0x13, r24	; 19
	PORTG &= ~((1<<5)|(1<<1));
     2ee:	84 b3       	in	r24, 0x14	; 20
     2f0:	8d 7d       	andi	r24, 0xDD	; 221
     2f2:	84 bb       	out	0x14, r24	; 20
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2f4:	26 e0       	ldi	r18, 0x06	; 6
     2f6:	40 e8       	ldi	r20, 0x80	; 128
     2f8:	55 e2       	ldi	r21, 0x25	; 37
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	93 e0       	ldi	r25, 0x03	; 3
     302:	63 d3       	rcall	.+1734   	; 0x9ca <_ZN14HardwareSerial5beginEmh>
	
  Serial.begin(9600);   // Initiate a serial communication
  SPI.begin();      // Initiate  SPI bus
     304:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN8SPIClass5beginEv>
  mfrc522.PCD_Init();   // Initiate MFRC522
     308:	80 e7       	ldi	r24, 0x70	; 112
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN7MFRC5228PCD_InitEv>
  Serial.println("Approximate your card to the reader...");
     310:	66 e0       	ldi	r22, 0x06	; 6
     312:	72 e0       	ldi	r23, 0x02	; 2
     314:	80 e8       	ldi	r24, 0x80	; 128
     316:	93 e0       	ldi	r25, 0x03	; 3
     318:	a0 d4       	rcall	.+2368   	; 0xc5a <_ZN5Print7printlnEPKc>
  Serial.println();
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	9a c4       	rjmp	.+2356   	; 0xc54 <_ZN5Print7printlnEv>

00000320 <_GLOBAL__sub_I__Z10USART_Initv>:
}

 
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
     320:	49 e0       	ldi	r20, 0x09	; 9
     322:	6a e0       	ldi	r22, 0x0A	; 10
     324:	80 e7       	ldi	r24, 0x70	; 112
     326:	93 e0       	ldi	r25, 0x03	; 3
     328:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <_ZN7MFRC522C1Ehh>

0000032c <loop>:
  Serial.println("Approximate your card to the reader...");
  Serial.println();

}
void loop() 
{
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	68 97       	sbiw	r28, 0x18	; 24
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
     348:	80 e7       	ldi	r24, 0x70	; 112
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     350:	88 23       	and	r24, r24
     352:	09 f4       	brne	.+2      	; 0x356 <loop+0x2a>
     354:	25 c2       	rjmp	.+1098   	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
     356:	80 e7       	ldi	r24, 0x70	; 112
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	64 d7       	rcall	.+3784   	; 0x1224 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     35c:	f8 2e       	mov	r15, r24
     35e:	88 23       	and	r24, r24
     360:	09 f4       	brne	.+2      	; 0x364 <loop+0x38>
     362:	1e c2       	rjmp	.+1084   	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
     364:	60 e3       	ldi	r22, 0x30	; 48
     366:	72 e0       	ldi	r23, 0x02	; 2
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	93 e0       	ldi	r25, 0x03	; 3
     36c:	72 d4       	rcall	.+2276   	; 0xc52 <_ZN5Print5printEPKc>
  String content= "";
     36e:	6c ea       	ldi	r22, 0xAC	; 172
     370:	72 e0       	ldi	r23, 0x02	; 2
     372:	ce 01       	movw	r24, r28
     374:	43 96       	adiw	r24, 0x13	; 19
     376:	5a d6       	rcall	.+3252   	; 0x102c <_ZN6StringC1EPKc>
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
     378:	e1 2c       	mov	r14, r1
     37a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end+0x2>
     37e:	e8 16       	cp	r14, r24
     380:	08 f0       	brcs	.+2      	; 0x384 <loop+0x58>
     382:	3d c0       	rjmp	.+122    	; 0x3fe <loop+0xd2>
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     384:	0e 2d       	mov	r16, r14
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	00 59       	subi	r16, 0x90	; 144
     38a:	1c 4f       	sbci	r17, 0xFC	; 252
     38c:	f8 01       	movw	r30, r16
     38e:	83 81       	ldd	r24, Z+3	; 0x03
     390:	80 31       	cpi	r24, 0x10	; 16
     392:	18 f0       	brcs	.+6      	; 0x39a <loop+0x6e>
     394:	63 e4       	ldi	r22, 0x43	; 67
     396:	72 e0       	ldi	r23, 0x02	; 2
     398:	02 c0       	rjmp	.+4      	; 0x39e <loop+0x72>
     39a:	6d e2       	ldi	r22, 0x2D	; 45
     39c:	72 e0       	ldi	r23, 0x02	; 2
     39e:	80 e8       	ldi	r24, 0x80	; 128
     3a0:	93 e0       	ldi	r25, 0x03	; 3
     3a2:	57 d4       	rcall	.+2222   	; 0xc52 <_ZN5Print5printEPKc>
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     3a4:	40 e1       	ldi	r20, 0x10	; 16
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	f8 01       	movw	r30, r16
     3aa:	63 81       	ldd	r22, Z+3	; 0x03
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	b8 d4       	rcall	.+2416   	; 0xd22 <_ZN5Print5printEhi>
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     3b2:	f8 01       	movw	r30, r16
     3b4:	83 81       	ldd	r24, Z+3	; 0x03
     3b6:	80 31       	cpi	r24, 0x10	; 16
     3b8:	18 f0       	brcs	.+6      	; 0x3c0 <loop+0x94>
     3ba:	63 e4       	ldi	r22, 0x43	; 67
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <loop+0x98>
     3c0:	6d e2       	ldi	r22, 0x2D	; 45
     3c2:	72 e0       	ldi	r23, 0x02	; 2
     3c4:	ce 01       	movw	r24, r28
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	31 d6       	rcall	.+3170   	; 0x102c <_ZN6StringC1EPKc>
     3ca:	be 01       	movw	r22, r28
     3cc:	6f 5f       	subi	r22, 0xFF	; 255
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	ce 01       	movw	r24, r28
     3d2:	43 96       	adiw	r24, 0x13	; 19
     3d4:	ad d6       	rcall	.+3418   	; 0x1130 <_ZN6String6concatERKS_>
     3d6:	ce 01       	movw	r24, r28
     3d8:	01 96       	adiw	r24, 0x01	; 1
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
     3da:	be d5       	rcall	.+2940   	; 0xf58 <_ZN6StringD1Ev>
     3dc:	40 e1       	ldi	r20, 0x10	; 16
     3de:	f8 01       	movw	r30, r16
     3e0:	63 81       	ldd	r22, Z+3	; 0x03
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	4b d6       	rcall	.+3222   	; 0x107e <_ZN6StringC1Ehh>
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	ce 01       	movw	r24, r28
     3f0:	43 96       	adiw	r24, 0x13	; 19
     3f2:	9e d6       	rcall	.+3388   	; 0x1130 <_ZN6String6concatERKS_>
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 96       	adiw	r24, 0x01	; 1
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
     3f8:	af d5       	rcall	.+2910   	; 0xf58 <_ZN6StringD1Ev>
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
     3fa:	e3 94       	inc	r14
     3fc:	be cf       	rjmp	.-132    	; 0x37a <loop+0x4e>
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	93 e0       	ldi	r25, 0x03	; 3
  Serial.print("Message : ");
     402:	28 d4       	rcall	.+2128   	; 0xc54 <_ZN5Print7printlnEv>
     404:	6a e3       	ldi	r22, 0x3A	; 58
     406:	72 e0       	ldi	r23, 0x02	; 2
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	93 e0       	ldi	r25, 0x03	; 3
  content.toUpperCase();
     40c:	22 d4       	rcall	.+2116   	; 0xc52 <_ZN5Print5printEPKc>
     40e:	ce 01       	movw	r24, r28
     410:	43 96       	adiw	r24, 0x13	; 19
  if (content.substring(1) == "37 B7 E8 A9"||content.substring(1)=="B5 59 3E A1"||content.substring(1)=="3B 52 D9 73") //change here the UID of the card/cards that you want to give access
     412:	f6 d6       	rcall	.+3564   	; 0x1200 <_ZN6String11toUpperCaseEv>
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	be 01       	movw	r22, r28
     41a:	6d 5e       	subi	r22, 0xED	; 237
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	0d 96       	adiw	r24, 0x0d	; 13
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     422:	35 df       	rcall	.-406    	; 0x28e <_ZNK6String9substringEj>
     424:	65 e4       	ldi	r22, 0x45	; 69
     426:	72 e0       	ldi	r23, 0x02	; 2
     428:	ce 01       	movw	r24, r28
     42a:	0d 96       	adiw	r24, 0x0d	; 13
     42c:	87 d6       	rcall	.+3342   	; 0x113c <_ZNK6String6equalsEPKc>
     42e:	81 11       	cpse	r24, r1
     430:	b3 c1       	rjmp	.+870    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	be 01       	movw	r22, r28
     438:	6d 5e       	subi	r22, 0xED	; 237
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	ce 01       	movw	r24, r28
     43e:	07 96       	adiw	r24, 0x07	; 7
     440:	26 df       	rcall	.-436    	; 0x28e <_ZNK6String9substringEj>
     442:	61 e5       	ldi	r22, 0x51	; 81
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	ce 01       	movw	r24, r28
     448:	07 96       	adiw	r24, 0x07	; 7
     44a:	78 d6       	rcall	.+3312   	; 0x113c <_ZNK6String6equalsEPKc>
     44c:	81 11       	cpse	r24, r1
     44e:	15 c0       	rjmp	.+42     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     450:	41 e0       	ldi	r20, 0x01	; 1
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	be 01       	movw	r22, r28
     456:	6d 5e       	subi	r22, 0xED	; 237
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	17 df       	rcall	.-466    	; 0x28e <_ZNK6String9substringEj>
     460:	6d e5       	ldi	r22, 0x5D	; 93
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	69 d6       	rcall	.+3282   	; 0x113c <_ZNK6String6equalsEPKc>
     46a:	ff 24       	eor	r15, r15
     46c:	f3 94       	inc	r15
     46e:	81 11       	cpse	r24, r1
     470:	01 c0       	rjmp	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	f1 2c       	mov	r15, r1
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	6f d5       	rcall	.+2782   	; 0xf58 <_ZN6StringD1Ev>
     47a:	ce 01       	movw	r24, r28
     47c:	07 96       	adiw	r24, 0x07	; 7
     47e:	6c d5       	rcall	.+2776   	; 0xf58 <_ZN6StringD1Ev>
     480:	ce 01       	movw	r24, r28
     482:	0d 96       	adiw	r24, 0x0d	; 13
     484:	69 d5       	rcall	.+2770   	; 0xf58 <_ZN6StringD1Ev>
     486:	ff 20       	and	r15, r15
  {
    Serial.println("Authorized access");
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	1c c1       	rjmp	.+568    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     48c:	69 e6       	ldi	r22, 0x69	; 105
     48e:	72 e0       	ldi	r23, 0x02	; 2
     490:	80 e8       	ldi	r24, 0x80	; 128
    Serial.println();
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	e2 d3       	rcall	.+1988   	; 0xc5a <_ZN5Print7printlnEPKc>
     496:	80 e8       	ldi	r24, 0x80	; 128
    if(content.substring(1)=="37 B7 E8 A9"){
     498:	93 e0       	ldi	r25, 0x03	; 3
     49a:	dc d3       	rcall	.+1976   	; 0xc54 <_ZN5Print7printlnEv>
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	be 01       	movw	r22, r28
     4a2:	6d 5e       	subi	r22, 0xED	; 237
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	f1 de       	rcall	.-542    	; 0x28e <_ZNK6String9substringEj>
     4ac:	65 e4       	ldi	r22, 0x45	; 69
     4ae:	72 e0       	ldi	r23, 0x02	; 2
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	43 d6       	rcall	.+3206   	; 0x113c <_ZNK6String6equalsEPKc>
     4b6:	18 2f       	mov	r17, r24
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	4d d5       	rcall	.+2714   	; 0xf58 <_ZN6StringD1Ev>
     4be:	11 23       	and	r17, r17
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
    Serial.println("hello_Tarun");
     4c2:	47 c0       	rjmp	.+142    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     4c4:	6b e7       	ldi	r22, 0x7B	; 123
     4c6:	72 e0       	ldi	r23, 0x02	; 2
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	93 e0       	ldi	r25, 0x03	; 3
	USART_Init();
     4cc:	c6 d3       	rcall	.+1932   	; 0xc5a <_ZN5Print7printlnEPKc>
     4ce:	ea de       	rcall	.-556    	; 0x2a4 <_Z10USART_Initv>
	PORTG |=(1<<1);
     4d0:	a1 9a       	sbi	0x14, 1	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d2:	ff ef       	ldi	r31, 0xFF	; 255
     4d4:	23 ed       	ldi	r18, 0xD3	; 211
     4d6:	80 e3       	ldi	r24, 0x30	; 48
     4d8:	f1 50       	subi	r31, 0x01	; 1
     4da:	20 40       	sbci	r18, 0x00	; 0
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	
	//Send_String("ATE0\r\n");//echo is turned off
	_delay_ms(1000);
	Send_String("AT+CMGF=1\r\n");//configuring modem in text mode
     4e2:	00 00       	nop
     4e4:	87 e8       	ldi	r24, 0x87	; 135
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	f4 de       	rcall	.-536    	; 0x2d2 <_Z11Send_StringPc>
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	e7 ea       	ldi	r30, 0xA7	; 167
     4ee:	f1 e6       	ldi	r31, 0x61	; 97
     4f0:	91 50       	subi	r25, 0x01	; 1
     4f2:	e0 40       	sbci	r30, 0x00	; 0
     4f4:	f0 40       	sbci	r31, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	
	_delay_ms(2000);
	Send_String("AT+CMGS=\"+919552478089\"\r\n");
     4fa:	00 00       	nop
     4fc:	83 e9       	ldi	r24, 0x93	; 147
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	e8 de       	rcall	.-560    	; 0x2d2 <_Z11Send_StringPc>
     502:	2f ef       	ldi	r18, 0xFF	; 255
     504:	87 ea       	ldi	r24, 0xA7	; 167
     506:	91 e6       	ldi	r25, 0x61	; 97
     508:	21 50       	subi	r18, 0x01	; 1
     50a:	80 40       	sbci	r24, 0x00	; 0
     50c:	90 40       	sbci	r25, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	00 c0       	rjmp	.+0      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     512:	00 00       	nop

	_delay_ms(2000);
	Send_String("TARUN,RFID-37 B7 E8 A9\r\n");
     514:	8d ea       	ldi	r24, 0xAD	; 173
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	dc de       	rcall	.-584    	; 0x2d2 <_Z11Send_StringPc>
     51a:	ef ef       	ldi	r30, 0xFF	; 255
     51c:	f7 ea       	ldi	r31, 0xA7	; 167
     51e:	21 e6       	ldi	r18, 0x61	; 97
     520:	e1 50       	subi	r30, 0x01	; 1
     522:	f0 40       	sbci	r31, 0x00	; 0
     524:	20 40       	sbci	r18, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
	
	_delay_ms(2000);
	USART_Transmit(26);
     52a:	00 00       	nop
     52c:	8a e1       	ldi	r24, 0x1A	; 26
     52e:	ca de       	rcall	.-620    	; 0x2c4 <_Z14USART_Transmith>
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	97 ea       	ldi	r25, 0xA7	; 167
     534:	e1 e6       	ldi	r30, 0x61	; 97
     536:	81 50       	subi	r24, 0x01	; 1
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	e0 40       	sbci	r30, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     540:	00 00       	nop
     542:	ff ef       	ldi	r31, 0xFF	; 255
     544:	27 ea       	ldi	r18, 0xA7	; 167
     546:	81 e6       	ldi	r24, 0x61	; 97
     548:	f1 50       	subi	r31, 0x01	; 1
     54a:	20 40       	sbci	r18, 0x00	; 0
	//Send_String("AT+CMSS=1\r\n");

	_delay_ms(2000);
	PORTG &=~(1<<1);
	}
    else if(content.substring(1)=="B5 59 3E A1")
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     550:	5a c0       	rjmp	.+180    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	be 01       	movw	r22, r28
     558:	6d 5e       	subi	r22, 0xED	; 237
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	96 de       	rcall	.-724    	; 0x28e <_ZNK6String9substringEj>
     562:	61 e5       	ldi	r22, 0x51	; 81
     564:	72 e0       	ldi	r23, 0x02	; 2
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	e8 d5       	rcall	.+3024   	; 0x113c <_ZNK6String6equalsEPKc>
     56c:	18 2f       	mov	r17, r24
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	f2 d4       	rcall	.+2532   	; 0xf58 <_ZN6StringD1Ev>
     574:	11 23       	and	r17, r17
    {Serial.println("hello_Pranav");
     576:	09 f4       	brne	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	4a c0       	rjmp	.+148    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     57a:	66 ec       	ldi	r22, 0xC6	; 198
     57c:	72 e0       	ldi	r23, 0x02	; 2
     57e:	80 e8       	ldi	r24, 0x80	; 128
		USART_Init();
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	6b d3       	rcall	.+1750   	; 0xc5a <_ZN5Print7printlnEPKc>
		PORTG |=(1<<1);
     584:	8f de       	rcall	.-738    	; 0x2a4 <_Z10USART_Initv>
     586:	a1 9a       	sbi	0x14, 1	; 20
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	e3 ed       	ldi	r30, 0xD3	; 211
     58c:	f0 e3       	ldi	r31, 0x30	; 48
     58e:	91 50       	subi	r25, 0x01	; 1
     590:	e0 40       	sbci	r30, 0x00	; 0
     592:	f0 40       	sbci	r31, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
		//Send_String("ATE0\r\n");//echo is turned off
		_delay_ms(1000);
		Send_String("AT+CMGF=1\r\n");//configuring modem in text mode
     596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     598:	00 00       	nop
     59a:	87 e8       	ldi	r24, 0x87	; 135
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	99 de       	rcall	.-718    	; 0x2d2 <_Z11Send_StringPc>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	87 ea       	ldi	r24, 0xA7	; 167
     5a4:	91 e6       	ldi	r25, 0x61	; 97
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
		
		_delay_ms(2000);
		Send_String("AT+CMGS=\"+919552478089\"\r\n");
     5b0:	00 00       	nop
     5b2:	83 e9       	ldi	r24, 0x93	; 147
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	8d de       	rcall	.-742    	; 0x2d2 <_Z11Send_StringPc>
     5b8:	ef ef       	ldi	r30, 0xFF	; 255
     5ba:	f7 ea       	ldi	r31, 0xA7	; 167
     5bc:	21 e6       	ldi	r18, 0x61	; 97
     5be:	e1 50       	subi	r30, 0x01	; 1
     5c0:	f0 40       	sbci	r31, 0x00	; 0
     5c2:	20 40       	sbci	r18, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5c8:	00 00       	nop

		_delay_ms(2000);
		Send_String("PRANAV,RFID-B5 59 3E A1\r\n");
     5ca:	83 ed       	ldi	r24, 0xD3	; 211
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	81 de       	rcall	.-766    	; 0x2d2 <_Z11Send_StringPc>
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	97 ea       	ldi	r25, 0xA7	; 167
     5d4:	e1 e6       	ldi	r30, 0x61	; 97
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	90 40       	sbci	r25, 0x00	; 0
     5da:	e0 40       	sbci	r30, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
		
		_delay_ms(2000);
		USART_Transmit(26);
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5e0:	00 00       	nop
     5e2:	8a e1       	ldi	r24, 0x1A	; 26
     5e4:	6f de       	rcall	.-802    	; 0x2c4 <_Z14USART_Transmith>
     5e6:	ff ef       	ldi	r31, 0xFF	; 255
     5e8:	27 ea       	ldi	r18, 0xA7	; 167
     5ea:	81 e6       	ldi	r24, 0x61	; 97
     5ec:	f1 50       	subi	r31, 0x01	; 1
     5ee:	20 40       	sbci	r18, 0x00	; 0
     5f0:	80 40       	sbci	r24, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5f6:	00 00       	nop
     5f8:	9f ef       	ldi	r25, 0xFF	; 255
     5fa:	e7 ea       	ldi	r30, 0xA7	; 167
     5fc:	f1 e6       	ldi	r31, 0x61	; 97
     5fe:	91 50       	subi	r25, 0x01	; 1
     600:	e0 40       	sbci	r30, 0x00	; 0
		
		_delay_ms(2000);
		//Send_String("AT+CMSS=1\r\n");

		_delay_ms(2000);
		PORTG &=~(1<<1);
     602:	f0 40       	sbci	r31, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	}
		
    else if(content.substring(1)=="3B 52 D9 73")
     606:	00 c0       	rjmp	.+0      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     608:	00 00       	nop
     60a:	a1 98       	cbi	0x14, 1	; 20
     60c:	c1 c0       	rjmp	.+386    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	be 01       	movw	r22, r28
     614:	6d 5e       	subi	r22, 0xED	; 237
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	38 de       	rcall	.-912    	; 0x28e <_ZNK6String9substringEj>
     61e:	6d e5       	ldi	r22, 0x5D	; 93
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	8a d5       	rcall	.+2836   	; 0x113c <_ZNK6String6equalsEPKc>
     628:	18 2f       	mov	r17, r24
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	94 d4       	rcall	.+2344   	; 0xf58 <_ZN6StringD1Ev>
    {Serial.println("hello_Vinit");
     630:	11 23       	and	r17, r17
     632:	09 f4       	brne	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     634:	ad c0       	rjmp	.+346    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     636:	6d ee       	ldi	r22, 0xED	; 237
     638:	72 e0       	ldi	r23, 0x02	; 2
     63a:	80 e8       	ldi	r24, 0x80	; 128
		USART_Init();
     63c:	93 e0       	ldi	r25, 0x03	; 3
		PORTG |= (1<<1);	
     63e:	0d d3       	rcall	.+1562   	; 0xc5a <_ZN5Print7printlnEPKc>
     640:	31 de       	rcall	.-926    	; 0x2a4 <_Z10USART_Initv>
     642:	a1 9a       	sbi	0x14, 1	; 20
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	83 ed       	ldi	r24, 0xD3	; 211
     648:	90 e3       	ldi	r25, 0x30	; 48
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	80 40       	sbci	r24, 0x00	; 0
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
		//Send_String("ATE0\r\n");//echo is turned off
		_delay_ms(1000);
		Send_String("AT+CMGF=1\r\n");//configuring modem in text mode
     652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     654:	00 00       	nop
     656:	87 e8       	ldi	r24, 0x87	; 135
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	3b de       	rcall	.-906    	; 0x2d2 <_Z11Send_StringPc>
     65c:	ef ef       	ldi	r30, 0xFF	; 255
     65e:	f7 ea       	ldi	r31, 0xA7	; 167
     660:	21 e6       	ldi	r18, 0x61	; 97
     662:	e1 50       	subi	r30, 0x01	; 1
     664:	f0 40       	sbci	r31, 0x00	; 0
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
		
		_delay_ms(2000);
		Send_String("AT+CMGS=\"+919552478089\"\r\n");
     66c:	00 00       	nop
     66e:	83 e9       	ldi	r24, 0x93	; 147
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	2f de       	rcall	.-930    	; 0x2d2 <_Z11Send_StringPc>
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	97 ea       	ldi	r25, 0xA7	; 167
     678:	e1 e6       	ldi	r30, 0x61	; 97
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	e0 40       	sbci	r30, 0x00	; 0

		_delay_ms(2000);
		Send_String("VINIT,RFID-3B 52 D9 73\r\n");
     680:	e1 f7       	brne	.-8      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     682:	00 c0       	rjmp	.+0      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     684:	00 00       	nop
     686:	89 ef       	ldi	r24, 0xF9	; 249
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	23 de       	rcall	.-954    	; 0x2d2 <_Z11Send_StringPc>
     68c:	ff ef       	ldi	r31, 0xFF	; 255
     68e:	27 ea       	ldi	r18, 0xA7	; 167
     690:	81 e6       	ldi	r24, 0x61	; 97
     692:	f1 50       	subi	r31, 0x01	; 1
     694:	20 40       	sbci	r18, 0x00	; 0
		
		_delay_ms(2000);
		USART_Transmit(26);
     696:	80 40       	sbci	r24, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     69c:	00 00       	nop
     69e:	8a e1       	ldi	r24, 0x1A	; 26
     6a0:	11 de       	rcall	.-990    	; 0x2c4 <_Z14USART_Transmith>
     6a2:	9f ef       	ldi	r25, 0xFF	; 255
     6a4:	e7 ea       	ldi	r30, 0xA7	; 167
     6a6:	f1 e6       	ldi	r31, 0x61	; 97
     6a8:	91 50       	subi	r25, 0x01	; 1
     6aa:	e0 40       	sbci	r30, 0x00	; 0
     6ac:	f0 40       	sbci	r31, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     6b2:	00 00       	nop
     6b4:	2f ef       	ldi	r18, 0xFF	; 255
     6b6:	87 ea       	ldi	r24, 0xA7	; 167
     6b8:	91 e6       	ldi	r25, 0x61	; 97
     6ba:	21 50       	subi	r18, 0x01	; 1
   
  

  }
 
 else if(content.substring(1)=="D6 76 D8 FB")  {
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	90 40       	sbci	r25, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     6c2:	a1 cf       	rjmp	.-190    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	be 01       	movw	r22, r28
     6ca:	6d 5e       	subi	r22, 0xED	; 237
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	dd dd       	rcall	.-1094   	; 0x28e <_ZNK6String9substringEj>
     6d4:	62 e1       	ldi	r22, 0x12	; 18
     6d6:	73 e0       	ldi	r23, 0x03	; 3
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	2f d5       	rcall	.+2654   	; 0x113c <_ZNK6String6equalsEPKc>
     6de:	18 2f       	mov	r17, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	39 d4       	rcall	.+2162   	; 0xf58 <_ZN6StringD1Ev>
    Serial.println(" Guest Access");
     6e6:	11 23       	and	r17, r17
     6e8:	09 f4       	brne	.+2      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6ea:	52 c0       	rjmp	.+164    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     6ec:	6e e1       	ldi	r22, 0x1E	; 30
     6ee:	73 e0       	ldi	r23, 0x03	; 3
  //  Serial.println("bhadva_spotted");
   // Serial.println("bhag_bhosdivale");
   // Serial.println("zaat_ke_baal");
	USART_Init();
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	93 e0       	ldi	r25, 0x03	; 3
		
		PORTG |= ((1<<5)|(1<<1));
     6f4:	b2 d2       	rcall	.+1380   	; 0xc5a <_ZN5Print7printlnEPKc>
     6f6:	d6 dd       	rcall	.-1108   	; 0x2a4 <_Z10USART_Initv>
     6f8:	84 b3       	in	r24, 0x14	; 20
     6fa:	82 62       	ori	r24, 0x22	; 34
     6fc:	84 bb       	out	0x14, r24	; 20
     6fe:	ef ef       	ldi	r30, 0xFF	; 255
     700:	f3 ed       	ldi	r31, 0xD3	; 211
     702:	20 e3       	ldi	r18, 0x30	; 48
     704:	e1 50       	subi	r30, 0x01	; 1
     706:	f0 40       	sbci	r31, 0x00	; 0
     708:	20 40       	sbci	r18, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
	//Send_String("ATE0\r\n");//echo is turned off
	_delay_ms(1000);
	Send_String("AT+CMGF=1\r\n");//configuring modem in text mode
     70c:	00 c0       	rjmp	.+0      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     70e:	00 00       	nop
     710:	87 e8       	ldi	r24, 0x87	; 135
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	de dd       	rcall	.-1092   	; 0x2d2 <_Z11Send_StringPc>
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	97 ea       	ldi	r25, 0xA7	; 167
     71a:	e1 e6       	ldi	r30, 0x61	; 97
     71c:	81 50       	subi	r24, 0x01	; 1
     71e:	90 40       	sbci	r25, 0x00	; 0
     720:	e0 40       	sbci	r30, 0x00	; 0
	
	_delay_ms(2000);
	Send_String("AT+CMGS=\"+919552478089\"\r\n");
     722:	e1 f7       	brne	.-8      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
     724:	00 c0       	rjmp	.+0      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     726:	00 00       	nop
     728:	83 e9       	ldi	r24, 0x93	; 147
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	d2 dd       	rcall	.-1116   	; 0x2d2 <_Z11Send_StringPc>
     72e:	ff ef       	ldi	r31, 0xFF	; 255
     730:	27 ea       	ldi	r18, 0xA7	; 167
     732:	81 e6       	ldi	r24, 0x61	; 97
     734:	f1 50       	subi	r31, 0x01	; 1
     736:	20 40       	sbci	r18, 0x00	; 0
     738:	80 40       	sbci	r24, 0x00	; 0

	_delay_ms(2000);
	Send_String("Guest Access!Entry Stored\r\n");
     73a:	e1 f7       	brne	.-8      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     73e:	00 00       	nop
     740:	8c e2       	ldi	r24, 0x2C	; 44
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	c6 dd       	rcall	.-1140   	; 0x2d2 <_Z11Send_StringPc>
     746:	9f ef       	ldi	r25, 0xFF	; 255
     748:	e7 ea       	ldi	r30, 0xA7	; 167
     74a:	f1 e6       	ldi	r31, 0x61	; 97
     74c:	91 50       	subi	r25, 0x01	; 1
     74e:	e0 40       	sbci	r30, 0x00	; 0
     750:	f0 40       	sbci	r31, 0x00	; 0
     752:	e1 f7       	brne	.-8      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
	
	_delay_ms(2000);
	USART_Transmit(26);
     754:	00 c0       	rjmp	.+0      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
     756:	00 00       	nop
     758:	8a e1       	ldi	r24, 0x1A	; 26
     75a:	b4 dd       	rcall	.-1176   	; 0x2c4 <_Z14USART_Transmith>
     75c:	2f ef       	ldi	r18, 0xFF	; 255
     75e:	87 ea       	ldi	r24, 0xA7	; 167
     760:	91 e6       	ldi	r25, 0x61	; 97
     762:	21 50       	subi	r18, 0x01	; 1
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     76c:	00 00       	nop
     76e:	ef ef       	ldi	r30, 0xFF	; 255
     770:	f7 ea       	ldi	r31, 0xA7	; 167
     772:	21 e6       	ldi	r18, 0x61	; 97
     774:	e1 50       	subi	r30, 0x01	; 1
     776:	f0 40       	sbci	r31, 0x00	; 0
     778:	20 40       	sbci	r18, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
	_delay_ms(2000);
	//Send_String("AT+CMSS=1\r\n");

	_delay_ms(2000);
	
    delay(3000);
     77e:	00 00       	nop
     780:	68 eb       	ldi	r22, 0xB8	; 184
     782:	7b e0       	ldi	r23, 0x0B	; 11
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	41 d3       	rcall	.+1666   	; 0xe0c <delay>
	PORTG&=~((1<<5)|(1<<1));
     78a:	84 b3       	in	r24, 0x14	; 20
     78c:	8d 7d       	andi	r24, 0xDD	; 221
     78e:	84 bb       	out	0x14, r24	; 20
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
     790:	ce 01       	movw	r24, r28
     792:	43 96       	adiw	r24, 0x13	; 19
     794:	e1 d3       	rcall	.+1986   	; 0xf58 <_ZN6StringD1Ev>
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
     798:	ce 01       	movw	r24, r28
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  if (content.substring(1) == "37 B7 E8 A9"||content.substring(1)=="B5 59 3E A1"||content.substring(1)=="3B 52 D9 73") //change here the UID of the card/cards that you want to give access
     79a:	0d 96       	adiw	r24, 0x0d	; 13
     79c:	dd d3       	rcall	.+1978   	; 0xf58 <_ZN6StringD1Ev>
     79e:	76 ce       	rjmp	.-788    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     7a0:	68 96       	adiw	r28, 0x18	; 24
     7a2:	0f b6       	in	r0, 0x3f	; 63
	_delay_ms(2000);
	
    delay(3000);
	PORTG&=~((1<<5)|(1<<1));
  }
}
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	08 95       	ret

000007ba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     7ba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     7bc:	91 8d       	ldd	r25, Z+25	; 0x19
     7be:	22 8d       	ldd	r18, Z+26	; 0x1a
     7c0:	89 2f       	mov	r24, r25
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	80 5c       	subi	r24, 0xC0	; 192
     7c6:	9f 4f       	sbci	r25, 0xFF	; 255
     7c8:	82 1b       	sub	r24, r18
     7ca:	91 09       	sbc	r25, r1
}
     7cc:	8f 73       	andi	r24, 0x3F	; 63
     7ce:	99 27       	eor	r25, r25
     7d0:	08 95       	ret

000007d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     7d2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     7d4:	91 8d       	ldd	r25, Z+25	; 0x19
     7d6:	82 8d       	ldd	r24, Z+26	; 0x1a
     7d8:	98 17       	cp	r25, r24
     7da:	31 f0       	breq	.+12     	; 0x7e8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     7dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     7de:	e8 0f       	add	r30, r24
     7e0:	f1 1d       	adc	r31, r1
     7e2:	85 8d       	ldd	r24, Z+29	; 0x1d
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7e8:	8f ef       	ldi	r24, 0xFF	; 255
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7ec:	08 95       	ret

000007ee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     7ee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     7f0:	91 8d       	ldd	r25, Z+25	; 0x19
     7f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7f4:	98 17       	cp	r25, r24
     7f6:	61 f0       	breq	.+24     	; 0x810 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     7f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7fa:	df 01       	movw	r26, r30
     7fc:	a8 0f       	add	r26, r24
     7fe:	b1 1d       	adc	r27, r1
     800:	5d 96       	adiw	r26, 0x1d	; 29
     802:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     804:	92 8d       	ldd	r25, Z+26	; 0x1a
     806:	9f 5f       	subi	r25, 0xFF	; 255
     808:	9f 73       	andi	r25, 0x3F	; 63
     80a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     814:	08 95       	ret

00000816 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     816:	fc 01       	movw	r30, r24
     818:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     81a:	44 8d       	ldd	r20, Z+28	; 0x1c
     81c:	25 2f       	mov	r18, r21
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	84 2f       	mov	r24, r20
     822:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     824:	82 1b       	sub	r24, r18
     826:	93 0b       	sbc	r25, r19
     828:	54 17       	cp	r21, r20
     82a:	10 f0       	brcs	.+4      	; 0x830 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     82c:	cf 96       	adiw	r24, 0x3f	; 63
     82e:	08 95       	ret
  return tail - head - 1;
     830:	01 97       	sbiw	r24, 0x01	; 1
}
     832:	08 95       	ret

00000834 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     834:	89 ea       	ldi	r24, 0xA9	; 169
     836:	95 e0       	ldi	r25, 0x05	; 5
     838:	89 2b       	or	r24, r25
     83a:	39 f0       	breq	.+14     	; 0x84a <_Z14serialEventRunv+0x16>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	89 2b       	or	r24, r25
     842:	19 f0       	breq	.+6      	; 0x84a <_Z14serialEventRunv+0x16>
     844:	86 d1       	rcall	.+780    	; 0xb52 <_Z17Serial0_availablev>
     846:	81 11       	cpse	r24, r1
     848:	25 c0       	rjmp	.+74     	; 0x894 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	89 2b       	or	r24, r25
     850:	41 f0       	breq	.+16     	; 0x862 <_Z14serialEventRunv+0x2e>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	89 2b       	or	r24, r25
     858:	21 f0       	breq	.+8      	; 0x862 <_Z14serialEventRunv+0x2e>
     85a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     85e:	81 11       	cpse	r24, r1
     860:	1c c0       	rjmp	.+56     	; 0x89a <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	89 2b       	or	r24, r25
     868:	41 f0       	breq	.+16     	; 0x87a <_Z14serialEventRunv+0x46>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	89 2b       	or	r24, r25
     870:	21 f0       	breq	.+8      	; 0x87a <_Z14serialEventRunv+0x46>
     872:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     876:	81 11       	cpse	r24, r1
     878:	13 c0       	rjmp	.+38     	; 0x8a0 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	89 2b       	or	r24, r25
     880:	a1 f0       	breq	.+40     	; 0x8aa <_Z14serialEventRunv+0x76>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	89 2b       	or	r24, r25
     888:	81 f0       	breq	.+32     	; 0x8aa <_Z14serialEventRunv+0x76>
     88a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     88e:	81 11       	cpse	r24, r1
     890:	0a c0       	rjmp	.+20     	; 0x8a6 <_Z14serialEventRunv+0x72>
     892:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     894:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     898:	d8 cf       	rjmp	.-80     	; 0x84a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     89a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     89e:	e1 cf       	rjmp	.-62     	; 0x862 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     8a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     8a4:	ea cf       	rjmp	.-44     	; 0x87a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     8a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     8aa:	08 95       	ret

000008ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8ac:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     8b0:	df 01       	movw	r26, r30
     8b2:	a8 0f       	add	r26, r24
     8b4:	b1 1d       	adc	r27, r1
     8b6:	a3 5a       	subi	r26, 0xA3	; 163
     8b8:	bf 4f       	sbci	r27, 0xFF	; 255
     8ba:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8bc:	84 8d       	ldd	r24, Z+28	; 0x1c
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	8f 73       	andi	r24, 0x3F	; 63
     8c4:	99 27       	eor	r25, r25
     8c6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8c8:	a6 89       	ldd	r26, Z+22	; 0x16
     8ca:	b7 89       	ldd	r27, Z+23	; 0x17
     8cc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8ce:	a0 89       	ldd	r26, Z+16	; 0x10
     8d0:	b1 89       	ldd	r27, Z+17	; 0x11
     8d2:	8c 91       	ld	r24, X
     8d4:	83 70       	andi	r24, 0x03	; 3
     8d6:	80 64       	ori	r24, 0x40	; 64
     8d8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     8da:	93 8d       	ldd	r25, Z+27	; 0x1b
     8dc:	84 8d       	ldd	r24, Z+28	; 0x1c
     8de:	98 13       	cpse	r25, r24
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8e2:	02 88       	ldd	r0, Z+18	; 0x12
     8e4:	f3 89       	ldd	r31, Z+19	; 0x13
     8e6:	e0 2d       	mov	r30, r0
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 7d       	andi	r24, 0xDF	; 223
     8ec:	80 83       	st	Z, r24
     8ee:	08 95       	ret

000008f0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
  _written = true;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     902:	9b 8d       	ldd	r25, Y+27	; 0x1b
     904:	8c 8d       	ldd	r24, Y+28	; 0x1c
     906:	98 13       	cpse	r25, r24
     908:	05 c0       	rjmp	.+10     	; 0x914 <_ZN14HardwareSerial5writeEh+0x24>
     90a:	e8 89       	ldd	r30, Y+16	; 0x10
     90c:	f9 89       	ldd	r31, Y+17	; 0x11
     90e:	80 81       	ld	r24, Z
     910:	85 fd       	sbrc	r24, 5
     912:	25 c0       	rjmp	.+74     	; 0x95e <_ZN14HardwareSerial5writeEh+0x6e>
     914:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     916:	0b 8d       	ldd	r16, Y+27	; 0x1b
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	0f 5f       	subi	r16, 0xFF	; 255
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	0f 73       	andi	r16, 0x3F	; 63
     920:	11 27       	eor	r17, r17
     922:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     924:	8c 8d       	ldd	r24, Y+28	; 0x1c
     926:	e8 12       	cpse	r14, r24
     928:	0b c0       	rjmp	.+22     	; 0x940 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	07 fc       	sbrc	r0, 7
     92e:	fa cf       	rjmp	.-12     	; 0x924 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     930:	e8 89       	ldd	r30, Y+16	; 0x10
     932:	f9 89       	ldd	r31, Y+17	; 0x11
     934:	80 81       	ld	r24, Z
     936:	85 ff       	sbrs	r24, 5
     938:	f5 cf       	rjmp	.-22     	; 0x924 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     93a:	ce 01       	movw	r24, r28
     93c:	b7 df       	rcall	.-146    	; 0x8ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     93e:	f2 cf       	rjmp	.-28     	; 0x924 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     940:	8b 8d       	ldd	r24, Y+27	; 0x1b
     942:	fe 01       	movw	r30, r28
     944:	e8 0f       	add	r30, r24
     946:	f1 1d       	adc	r31, r1
     948:	e3 5a       	subi	r30, 0xA3	; 163
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     94e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     950:	f8 94       	cli
    _tx_buffer_head = i;
     952:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     954:	ea 89       	ldd	r30, Y+18	; 0x12
     956:	fb 89       	ldd	r31, Y+19	; 0x13
     958:	80 81       	ld	r24, Z
     95a:	80 62       	ori	r24, 0x20	; 32
     95c:	0a c0       	rjmp	.+20     	; 0x972 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     95e:	9f b7       	in	r25, 0x3f	; 63
     960:	f8 94       	cli
      *_udr = c;
     962:	ee 89       	ldd	r30, Y+22	; 0x16
     964:	ff 89       	ldd	r31, Y+23	; 0x17
     966:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     968:	e8 89       	ldd	r30, Y+16	; 0x10
     96a:	f9 89       	ldd	r31, Y+17	; 0x11
     96c:	80 81       	ld	r24, Z
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	80 64       	ori	r24, 0x40	; 64
     972:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     974:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     98e:	88 8d       	ldd	r24, Y+24	; 0x18
     990:	88 23       	and	r24, r24
     992:	c1 f0       	breq	.+48     	; 0x9c4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     994:	ea 89       	ldd	r30, Y+18	; 0x12
     996:	fb 89       	ldd	r31, Y+19	; 0x13
     998:	80 81       	ld	r24, Z
     99a:	85 fd       	sbrc	r24, 5
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <_ZN14HardwareSerial5flushEv+0x20>
     99e:	a8 89       	ldd	r26, Y+16	; 0x10
     9a0:	b9 89       	ldd	r27, Y+17	; 0x11
     9a2:	8c 91       	ld	r24, X
     9a4:	86 fd       	sbrc	r24, 6
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	07 fc       	sbrc	r0, 7
     9ac:	f5 cf       	rjmp	.-22     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
     9ae:	80 81       	ld	r24, Z
     9b0:	85 ff       	sbrs	r24, 5
     9b2:	f2 cf       	rjmp	.-28     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9b4:	a8 89       	ldd	r26, Y+16	; 0x10
     9b6:	b9 89       	ldd	r27, Y+17	; 0x11
     9b8:	8c 91       	ld	r24, X
     9ba:	85 ff       	sbrs	r24, 5
     9bc:	ed cf       	rjmp	.-38     	; 0x998 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9be:	ce 01       	movw	r24, r28
     9c0:	75 df       	rcall	.-278    	; 0x8ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9c2:	e8 cf       	rjmp	.-48     	; 0x994 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
     9da:	6a 01       	movw	r12, r20
     9dc:	7b 01       	movw	r14, r22
     9de:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9e0:	e8 89       	ldd	r30, Y+16	; 0x10
     9e2:	f9 89       	ldd	r31, Y+17	; 0x11
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9e8:	41 15       	cp	r20, r1
     9ea:	51 4e       	sbci	r21, 0xE1	; 225
     9ec:	61 05       	cpc	r22, r1
     9ee:	71 05       	cpc	r23, r1
     9f0:	b1 f0       	breq	.+44     	; 0xa1e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	79 e0       	ldi	r23, 0x09	; 9
     9f6:	8d e3       	ldi	r24, 0x3D	; 61
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a7 01       	movw	r20, r14
     9fc:	96 01       	movw	r18, r12
     9fe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodsi4>
     a02:	da 01       	movw	r26, r20
     a04:	c9 01       	movw	r24, r18
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	a1 09       	sbc	r26, r1
     a0a:	b1 09       	sbc	r27, r1
     a0c:	b6 95       	lsr	r27
     a0e:	a7 95       	ror	r26
     a10:	97 95       	ror	r25
     a12:	87 95       	ror	r24
     a14:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a16:	21 15       	cp	r18, r1
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	38 07       	cpc	r19, r24
     a1c:	a8 f0       	brcs	.+42     	; 0xa48 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a1e:	e8 89       	ldd	r30, Y+16	; 0x10
     a20:	f9 89       	ldd	r31, Y+17	; 0x11
     a22:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a24:	60 e8       	ldi	r22, 0x80	; 128
     a26:	74 e8       	ldi	r23, 0x84	; 132
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a7 01       	movw	r20, r14
     a2e:	96 01       	movw	r18, r12
     a30:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodsi4>
     a34:	da 01       	movw	r26, r20
     a36:	c9 01       	movw	r24, r18
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	a1 09       	sbc	r26, r1
     a3c:	b1 09       	sbc	r27, r1
     a3e:	b6 95       	lsr	r27
     a40:	a7 95       	ror	r26
     a42:	97 95       	ror	r25
     a44:	87 95       	ror	r24
     a46:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a48:	ec 85       	ldd	r30, Y+12	; 0x0c
     a4a:	fd 85       	ldd	r31, Y+13	; 0x0d
     a4c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a4e:	ee 85       	ldd	r30, Y+14	; 0x0e
     a50:	ff 85       	ldd	r31, Y+15	; 0x0f
     a52:	20 83       	st	Z, r18

  _written = false;
     a54:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a56:	ec 89       	ldd	r30, Y+20	; 0x14
     a58:	fd 89       	ldd	r31, Y+21	; 0x15
     a5a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a5c:	ea 89       	ldd	r30, Y+18	; 0x12
     a5e:	fb 89       	ldd	r31, Y+19	; 0x13
     a60:	80 81       	ld	r24, Z
     a62:	80 61       	ori	r24, 0x10	; 16
     a64:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a66:	ea 89       	ldd	r30, Y+18	; 0x12
     a68:	fb 89       	ldd	r31, Y+19	; 0x13
     a6a:	80 81       	ld	r24, Z
     a6c:	88 60       	ori	r24, 0x08	; 8
     a6e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a70:	ea 89       	ldd	r30, Y+18	; 0x12
     a72:	fb 89       	ldd	r31, Y+19	; 0x13
     a74:	80 81       	ld	r24, Z
     a76:	80 68       	ori	r24, 0x80	; 128
     a78:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a7a:	ea 89       	ldd	r30, Y+18	; 0x12
     a7c:	fb 89       	ldd	r31, Y+19	; 0x13
     a7e:	80 81       	ld	r24, Z
     a80:	8f 7d       	andi	r24, 0xDF	; 223
     a82:	80 83       	st	Z, r24
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	0b b6       	in	r0, 0x3b	; 59
     aa0:	0f 92       	push	r0
     aa2:	2f 93       	push	r18
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     aac:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <Serial+0x10>
     ab0:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <Serial+0x11>
     ab4:	80 81       	ld	r24, Z
     ab6:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <Serial+0x16>
     aba:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <Serial+0x17>
     abe:	82 fd       	sbrc	r24, 2
     ac0:	12 c0       	rjmp	.+36     	; 0xae6 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ac2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ac4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Serial+0x19>
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     acc:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <Serial+0x1a>
     ad0:	82 17       	cp	r24, r18
     ad2:	51 f0       	breq	.+20     	; 0xae8 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     ad4:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x19>
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	e0 58       	subi	r30, 0x80	; 128
     adc:	fc 4f       	sbci	r31, 0xFC	; 252
     ade:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ae0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <Serial+0x19>
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ae6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     ae8:	ff 91       	pop	r31
     aea:	ef 91       	pop	r30
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0b be       	out	0x3b, r0	; 59
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	0b b6       	in	r0, 0x3b	; 59
     b0c:	0f 92       	push	r0
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	4f 93       	push	r20
     b14:	5f 93       	push	r21
     b16:	6f 93       	push	r22
     b18:	7f 93       	push	r23
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	c0 de       	rcall	.-640    	; 0x8ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0b be       	out	0x3b, r0	; 59
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	31 de       	rcall	.-926    	; 0x7ba <_ZN14HardwareSerial9availableEv>
     b58:	21 e0       	ldi	r18, 0x01	; 1
     b5a:	89 2b       	or	r24, r25
     b5c:	09 f4       	brne	.+2      	; 0xb60 <_Z17Serial0_availablev+0xe>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
}
     b60:	82 2f       	mov	r24, r18
     b62:	08 95       	ret

00000b64 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b64:	e0 e8       	ldi	r30, 0x80	; 128
     b66:	f3 e0       	ldi	r31, 0x03	; 3
     b68:	13 82       	std	Z+3, r1	; 0x03
     b6a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b6c:	88 ee       	ldi	r24, 0xE8	; 232
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	84 83       	std	Z+4, r24	; 0x04
     b76:	95 83       	std	Z+5, r25	; 0x05
     b78:	a6 83       	std	Z+6, r26	; 0x06
     b7a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b7c:	8c e4       	ldi	r24, 0x4C	; 76
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	80 83       	st	Z, r24
     b84:	85 ec       	ldi	r24, 0xC5	; 197
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	95 87       	std	Z+13, r25	; 0x0d
     b8a:	84 87       	std	Z+12, r24	; 0x0c
     b8c:	84 ec       	ldi	r24, 0xC4	; 196
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	97 87       	std	Z+15, r25	; 0x0f
     b92:	86 87       	std	Z+14, r24	; 0x0e
     b94:	80 ec       	ldi	r24, 0xC0	; 192
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	91 8b       	std	Z+17, r25	; 0x11
     b9a:	80 8b       	std	Z+16, r24	; 0x10
     b9c:	81 ec       	ldi	r24, 0xC1	; 193
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	93 8b       	std	Z+19, r25	; 0x13
     ba2:	82 8b       	std	Z+18, r24	; 0x12
     ba4:	82 ec       	ldi	r24, 0xC2	; 194
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	95 8b       	std	Z+21, r25	; 0x15
     baa:	84 8b       	std	Z+20, r24	; 0x14
     bac:	86 ec       	ldi	r24, 0xC6	; 198
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	97 8b       	std	Z+23, r25	; 0x17
     bb2:	86 8b       	std	Z+22, r24	; 0x16
     bb4:	11 8e       	std	Z+25, r1	; 0x19
     bb6:	12 8e       	std	Z+26, r1	; 0x1a
     bb8:	13 8e       	std	Z+27, r1	; 0x1b
     bba:	14 8e       	std	Z+28, r1	; 0x1c
     bbc:	08 95       	ret

00000bbe <initVariant>:
     bbe:	08 95       	ret

00000bc0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bc0:	69 d1       	rcall	.+722    	; 0xe94 <init>

	initVariant();
     bc2:	fd df       	rcall	.-6      	; 0xbbe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     bc4:	91 db       	rcall	.-2270   	; 0x2e8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bc6:	ca e1       	ldi	r28, 0x1A	; 26
     bc8:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     bca:	b0 db       	rcall	.-2208   	; 0x32c <loop>
		if (serialEventRun) serialEventRun();
     bcc:	20 97       	sbiw	r28, 0x00	; 0
     bce:	e9 f3       	breq	.-6      	; 0xbca <main+0xa>
     bd0:	31 de       	rcall	.-926    	; 0x834 <_Z14serialEventRunv>
     bd2:	fb cf       	rjmp	.-10     	; 0xbca <main+0xa>

00000bd4 <_ZN5Print5writeEPKhj>:
     bd4:	cf 92       	push	r12
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	6c 01       	movw	r12, r24
     be6:	7a 01       	movw	r14, r20
     be8:	8b 01       	movw	r16, r22
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	d0 e0       	ldi	r29, 0x00	; 0
     bee:	ce 15       	cp	r28, r14
     bf0:	df 05       	cpc	r29, r15
     bf2:	81 f0       	breq	.+32     	; 0xc14 <_ZN5Print5writeEPKhj+0x40>
     bf4:	d8 01       	movw	r26, r16
     bf6:	6d 91       	ld	r22, X+
     bf8:	8d 01       	movw	r16, r26
     bfa:	d6 01       	movw	r26, r12
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	01 90       	ld	r0, Z+
     c02:	f0 81       	ld	r31, Z
     c04:	e0 2d       	mov	r30, r0
     c06:	c6 01       	movw	r24, r12
     c08:	19 95       	eicall
     c0a:	89 2b       	or	r24, r25
     c0c:	11 f0       	breq	.+4      	; 0xc12 <_ZN5Print5writeEPKhj+0x3e>
     c0e:	21 96       	adiw	r28, 0x01	; 1
     c10:	ee cf       	rjmp	.-36     	; 0xbee <_ZN5Print5writeEPKhj+0x1a>
     c12:	7e 01       	movw	r14, r28
     c14:	c7 01       	movw	r24, r14
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	08 95       	ret

00000c28 <_ZN5Print5writeEPKc>:
     c28:	61 15       	cp	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	79 f0       	breq	.+30     	; 0xc4c <_ZN5Print5writeEPKc+0x24>
     c2e:	fb 01       	movw	r30, r22
     c30:	01 90       	ld	r0, Z+
     c32:	00 20       	and	r0, r0
     c34:	e9 f7       	brne	.-6      	; 0xc30 <_ZN5Print5writeEPKc+0x8>
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	af 01       	movw	r20, r30
     c3a:	46 1b       	sub	r20, r22
     c3c:	57 0b       	sbc	r21, r23
     c3e:	dc 01       	movw	r26, r24
     c40:	ed 91       	ld	r30, X+
     c42:	fc 91       	ld	r31, X
     c44:	02 80       	ldd	r0, Z+2	; 0x02
     c46:	f3 81       	ldd	r31, Z+3	; 0x03
     c48:	e0 2d       	mov	r30, r0
     c4a:	19 94       	eijmp
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	08 95       	ret

00000c52 <_ZN5Print5printEPKc>:
     c52:	ea cf       	rjmp	.-44     	; 0xc28 <_ZN5Print5writeEPKc>

00000c54 <_ZN5Print7printlnEv>:
     c54:	6a ea       	ldi	r22, 0xAA	; 170
     c56:	72 e0       	ldi	r23, 0x02	; 2
     c58:	e7 cf       	rjmp	.-50     	; 0xc28 <_ZN5Print5writeEPKc>

00000c5a <_ZN5Print7printlnEPKc>:
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
     c64:	e1 df       	rcall	.-62     	; 0xc28 <_ZN5Print5writeEPKc>
     c66:	8c 01       	movw	r16, r24
     c68:	ce 01       	movw	r24, r28
     c6a:	f4 df       	rcall	.-24     	; 0xc54 <_ZN5Print7printlnEv>
     c6c:	80 0f       	add	r24, r16
     c6e:	91 1f       	adc	r25, r17
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     c7a:	8f 92       	push	r8
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	a1 97       	sbiw	r28, 0x21	; 33
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	7c 01       	movw	r14, r24
     ca0:	fa 01       	movw	r30, r20
     ca2:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     ca4:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	08 f4       	brcc	.+2      	; 0xcac <_ZN5Print11printNumberEmh+0x32>
     caa:	2a e0       	ldi	r18, 0x0A	; 10
     cac:	8e 01       	movw	r16, r28
     cae:	0f 5d       	subi	r16, 0xDF	; 223
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     cb2:	82 2e       	mov	r8, r18
     cb4:	91 2c       	mov	r9, r1
     cb6:	a1 2c       	mov	r10, r1
     cb8:	b1 2c       	mov	r11, r1
     cba:	bf 01       	movw	r22, r30
     cbc:	a5 01       	movw	r20, r10
     cbe:	94 01       	movw	r18, r8
     cc0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodsi4>
    n /= base;
     cc4:	f9 01       	movw	r30, r18
     cc6:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     cc8:	01 50       	subi	r16, 0x01	; 1
     cca:	11 09       	sbc	r17, r1
     ccc:	6a 30       	cpi	r22, 0x0A	; 10
     cce:	10 f4       	brcc	.+4      	; 0xcd4 <_ZN5Print11printNumberEmh+0x5a>
     cd0:	60 5d       	subi	r22, 0xD0	; 208
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <_ZN5Print11printNumberEmh+0x5c>
     cd4:	69 5c       	subi	r22, 0xC9	; 201
     cd6:	d8 01       	movw	r26, r16
     cd8:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     cda:	23 2b       	or	r18, r19
     cdc:	24 2b       	or	r18, r20
     cde:	25 2b       	or	r18, r21
     ce0:	61 f7       	brne	.-40     	; 0xcba <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     ce2:	b8 01       	movw	r22, r16
     ce4:	c7 01       	movw	r24, r14
     ce6:	a0 df       	rcall	.-192    	; 0xc28 <_ZN5Print5writeEPKc>
}
     ce8:	a1 96       	adiw	r28, 0x21	; 33
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	9f 90       	pop	r9
     d06:	8f 90       	pop	r8
     d08:	08 95       	ret

00000d0a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	41 f4       	brne	.+16     	; 0xd20 <_ZN5Print5printEmi+0x16>
     d10:	dc 01       	movw	r26, r24
     d12:	ed 91       	ld	r30, X+
     d14:	fc 91       	ld	r31, X
     d16:	01 90       	ld	r0, Z+
     d18:	f0 81       	ld	r31, Z
     d1a:	e0 2d       	mov	r30, r0
     d1c:	64 2f       	mov	r22, r20
     d1e:	19 94       	eijmp
  else return printNumber(n, base);
     d20:	ac cf       	rjmp	.-168    	; 0xc7a <_ZN5Print11printNumberEmh>

00000d22 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     d22:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     d24:	46 2f       	mov	r20, r22
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	ee cf       	rjmp	.-36     	; 0xd0a <_ZN5Print5printEmi>

00000d2e <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <timer0_millis>
     d48:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <timer0_millis+0x1>
     d4c:	a0 91 20 04 	lds	r26, 0x0420	; 0x800420 <timer0_millis+0x2>
     d50:	b0 91 21 04 	lds	r27, 0x0421	; 0x800421 <timer0_millis+0x3>
     d54:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <timer0_fract>
     d58:	23 e0       	ldi	r18, 0x03	; 3
     d5a:	23 0f       	add	r18, r19
     d5c:	2d 37       	cpi	r18, 0x7D	; 125
     d5e:	20 f4       	brcc	.+8      	; 0xd68 <__vector_23+0x3a>
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	a1 1d       	adc	r26, r1
     d64:	b1 1d       	adc	r27, r1
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__vector_23+0x44>
     d68:	26 e8       	ldi	r18, 0x86	; 134
     d6a:	23 0f       	add	r18, r19
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	a1 1d       	adc	r26, r1
     d70:	b1 1d       	adc	r27, r1
     d72:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <timer0_fract>
     d76:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <timer0_millis>
     d7a:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <timer0_millis+0x1>
     d7e:	a0 93 20 04 	sts	0x0420, r26	; 0x800420 <timer0_millis+0x2>
     d82:	b0 93 21 04 	sts	0x0421, r27	; 0x800421 <timer0_millis+0x3>
     d86:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <timer0_overflow_count>
     d8a:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <timer0_overflow_count+0x1>
     d8e:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <timer0_overflow_count+0x2>
     d92:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <timer0_overflow_count+0x3>
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	a1 1d       	adc	r26, r1
     d9a:	b1 1d       	adc	r27, r1
     d9c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <timer0_overflow_count>
     da0:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <timer0_overflow_count+0x1>
     da4:	a0 93 24 04 	sts	0x0424, r26	; 0x800424 <timer0_overflow_count+0x2>
     da8:	b0 93 25 04 	sts	0x0425, r27	; 0x800425 <timer0_overflow_count+0x3>
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     dc2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     dc4:	f8 94       	cli
	m = timer0_overflow_count;
     dc6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <timer0_overflow_count>
     dca:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <timer0_overflow_count+0x1>
     dce:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <timer0_overflow_count+0x2>
     dd2:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     dd6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     dd8:	a8 9b       	sbis	0x15, 0	; 21
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <micros+0x24>
     ddc:	2f 3f       	cpi	r18, 0xFF	; 255
     dde:	19 f0       	breq	.+6      	; 0xde6 <micros+0x24>
		m++;
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	a1 1d       	adc	r26, r1
     de4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     de6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     de8:	ba 2f       	mov	r27, r26
     dea:	a9 2f       	mov	r26, r25
     dec:	98 2f       	mov	r25, r24
     dee:	88 27       	eor	r24, r24
     df0:	82 0f       	add	r24, r18
     df2:	91 1d       	adc	r25, r1
     df4:	a1 1d       	adc	r26, r1
     df6:	b1 1d       	adc	r27, r1
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	42 e0       	ldi	r20, 0x02	; 2
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	4a 95       	dec	r20
     e08:	d1 f7       	brne	.-12     	; 0xdfe <micros+0x3c>
}
     e0a:	08 95       	ret

00000e0c <delay>:

void delay(unsigned long ms)
{
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	6b 01       	movw	r12, r22
     e1e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e20:	d0 df       	rcall	.-96     	; 0xdc2 <micros>
     e22:	4b 01       	movw	r8, r22
     e24:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e26:	c1 14       	cp	r12, r1
     e28:	d1 04       	cpc	r13, r1
     e2a:	e1 04       	cpc	r14, r1
     e2c:	f1 04       	cpc	r15, r1
		yield();
     e2e:	f1 f0       	breq	.+60     	; 0xe6c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e30:	ed d6       	rcall	.+3546   	; 0x1c0c <yield>
     e32:	c7 df       	rcall	.-114    	; 0xdc2 <micros>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	88 19       	sub	r24, r8
     e3a:	99 09       	sbc	r25, r9
     e3c:	aa 09       	sbc	r26, r10
     e3e:	bb 09       	sbc	r27, r11
     e40:	88 3e       	cpi	r24, 0xE8	; 232
     e42:	93 40       	sbci	r25, 0x03	; 3
     e44:	a1 05       	cpc	r26, r1
     e46:	b1 05       	cpc	r27, r1
     e48:	70 f3       	brcs	.-36     	; 0xe26 <delay+0x1a>
			ms--;
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	c2 1a       	sub	r12, r18
     e4e:	d1 08       	sbc	r13, r1
     e50:	e1 08       	sbc	r14, r1
     e52:	f1 08       	sbc	r15, r1
			start += 1000;
     e54:	88 ee       	ldi	r24, 0xE8	; 232
     e56:	88 0e       	add	r8, r24
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	98 1e       	adc	r9, r24
     e5c:	a1 1c       	adc	r10, r1
     e5e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e60:	c1 14       	cp	r12, r1
     e62:	d1 04       	cpc	r13, r1
     e64:	e1 04       	cpc	r14, r1
     e66:	f1 04       	cpc	r15, r1
     e68:	21 f7       	brne	.-56     	; 0xe32 <delay+0x26>
     e6a:	dd cf       	rjmp	.-70     	; 0xe26 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	08 95       	ret

00000e7e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	91 05       	cpc	r25, r1
     e82:	38 f0       	brcs	.+14     	; 0xe92 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e8c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <delayMicroseconds+0x10>
     e92:	08 95       	ret

00000e94 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e94:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e96:	84 b5       	in	r24, 0x24	; 36
     e98:	82 60       	ori	r24, 0x02	; 2
     e9a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e9c:	84 b5       	in	r24, 0x24	; 36
     e9e:	81 60       	ori	r24, 0x01	; 1
     ea0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ea2:	85 b5       	in	r24, 0x25	; 37
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ea8:	85 b5       	in	r24, 0x25	; 37
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     eae:	ee e6       	ldi	r30, 0x6E	; 110
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     eb8:	e1 e8       	ldi	r30, 0x81	; 129
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     eca:	e0 e8       	ldi	r30, 0x80	; 128
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ed4:	e1 eb       	ldi	r30, 0xB1	; 177
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ede:	e0 eb       	ldi	r30, 0xB0	; 176
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	81 60       	ori	r24, 0x01	; 1
     ee6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     ee8:	e1 e9       	ldi	r30, 0x91	; 145
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     ef2:	80 81       	ld	r24, Z
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     ef8:	e0 e9       	ldi	r30, 0x90	; 144
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     f02:	e1 ea       	ldi	r30, 0xA1	; 161
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     f12:	e0 ea       	ldi	r30, 0xA0	; 160
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     f1c:	e1 e2       	ldi	r30, 0x21	; 33
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	80 81       	ld	r24, Z
     f22:	82 60       	ori	r24, 0x02	; 2
     f24:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     f26:	80 81       	ld	r24, Z
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     f2c:	e0 e2       	ldi	r30, 0x20	; 32
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	80 81       	ld	r24, Z
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f36:	ea e7       	ldi	r30, 0x7A	; 122
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f46:	80 81       	ld	r24, Z
     f48:	81 60       	ori	r24, 0x01	; 1
     f4a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f52:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     f56:	08 95       	ret

00000f58 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
     f58:	fc 01       	movw	r30, r24
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <free>

00000f62 <_ZN6String10invalidateEv>:
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
     f68:	88 81       	ld	r24, Y
     f6a:	99 81       	ldd	r25, Y+1	; 0x01
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	09 f0       	breq	.+2      	; 0xf72 <_ZN6String10invalidateEv+0x10>
     f70:	f7 d7       	rcall	.+4078   	; 0x1f60 <free>
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	18 82       	st	Y, r1
     f76:	1d 82       	std	Y+5, r1	; 0x05
     f78:	1c 82       	std	Y+4, r1	; 0x04
     f7a:	1b 82       	std	Y+3, r1	; 0x03
     f7c:	1a 82       	std	Y+2, r1	; 0x02
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <_ZN6String12changeBufferEj>:
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
     f8e:	8b 01       	movw	r16, r22
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	88 81       	ld	r24, Y
     f96:	99 81       	ldd	r25, Y+1	; 0x01
     f98:	0e 94 39 10 	call	0x2072	; 0x2072 <realloc>
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	31 f0       	breq	.+12     	; 0xfac <_ZN6String12changeBufferEj+0x28>
     fa0:	99 83       	std	Y+1, r25	; 0x01
     fa2:	88 83       	st	Y, r24
     fa4:	1b 83       	std	Y+3, r17	; 0x03
     fa6:	0a 83       	std	Y+2, r16	; 0x02
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	01 c0       	rjmp	.+2      	; 0xfae <_ZN6String12changeBufferEj+0x2a>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <_ZN6String7reserveEj>:
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
     fbe:	88 81       	ld	r24, Y
     fc0:	99 81       	ldd	r25, Y+1	; 0x01
     fc2:	89 2b       	or	r24, r25
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <_ZN6String7reserveEj+0x18>
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	86 17       	cp	r24, r22
     fcc:	97 07       	cpc	r25, r23
     fce:	58 f4       	brcc	.+22     	; 0xfe6 <_ZN6String7reserveEj+0x2e>
     fd0:	ce 01       	movw	r24, r28
     fd2:	d8 df       	rcall	.-80     	; 0xf84 <_ZN6String12changeBufferEj>
     fd4:	88 23       	and	r24, r24
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <_ZN6String7reserveEj+0x30>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	89 2b       	or	r24, r25
     fde:	19 f4       	brne	.+6      	; 0xfe6 <_ZN6String7reserveEj+0x2e>
     fe0:	e8 81       	ld	r30, Y
     fe2:	f9 81       	ldd	r31, Y+1	; 0x01
     fe4:	10 82       	st	Z, r1
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <_ZN6String4copyEPKcj>:
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
     ffc:	7b 01       	movw	r14, r22
     ffe:	8a 01       	movw	r16, r20
    1000:	ba 01       	movw	r22, r20
    1002:	da df       	rcall	.-76     	; 0xfb8 <_ZN6String7reserveEj>
    1004:	81 11       	cpse	r24, r1
    1006:	03 c0       	rjmp	.+6      	; 0x100e <_ZN6String4copyEPKcj+0x20>
    1008:	ce 01       	movw	r24, r28
    100a:	ab df       	rcall	.-170    	; 0xf62 <_ZN6String10invalidateEv>
    100c:	07 c0       	rjmp	.+14     	; 0x101c <_ZN6String4copyEPKcj+0x2e>
    100e:	1d 83       	std	Y+5, r17	; 0x05
    1010:	0c 83       	std	Y+4, r16	; 0x04
    1012:	b7 01       	movw	r22, r14
    1014:	88 81       	ld	r24, Y
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	0e 94 33 11 	call	0x2266	; 0x2266 <strcpy>
    101c:	ce 01       	movw	r24, r28
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	08 95       	ret

0000102c <_ZN6StringC1EPKc>:
    102c:	fc 01       	movw	r30, r24
    102e:	11 82       	std	Z+1, r1	; 0x01
    1030:	10 82       	st	Z, r1
    1032:	13 82       	std	Z+3, r1	; 0x03
    1034:	12 82       	std	Z+2, r1	; 0x02
    1036:	15 82       	std	Z+5, r1	; 0x05
    1038:	14 82       	std	Z+4, r1	; 0x04
    103a:	61 15       	cp	r22, r1
    103c:	71 05       	cpc	r23, r1
    103e:	49 f0       	breq	.+18     	; 0x1052 <_ZN6StringC1EPKc+0x26>
    1040:	fb 01       	movw	r30, r22
    1042:	01 90       	ld	r0, Z+
    1044:	00 20       	and	r0, r0
    1046:	e9 f7       	brne	.-6      	; 0x1042 <_ZN6StringC1EPKc+0x16>
    1048:	31 97       	sbiw	r30, 0x01	; 1
    104a:	af 01       	movw	r20, r30
    104c:	46 1b       	sub	r20, r22
    104e:	57 0b       	sbc	r21, r23
    1050:	ce cf       	rjmp	.-100    	; 0xfee <_ZN6String4copyEPKcj>
    1052:	08 95       	ret

00001054 <_ZN6StringaSEPKc>:
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	61 15       	cp	r22, r1
    105c:	71 05       	cpc	r23, r1
    105e:	51 f0       	breq	.+20     	; 0x1074 <_ZN6StringaSEPKc+0x20>
    1060:	fb 01       	movw	r30, r22
    1062:	01 90       	ld	r0, Z+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <_ZN6StringaSEPKc+0xe>
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	af 01       	movw	r20, r30
    106c:	46 1b       	sub	r20, r22
    106e:	57 0b       	sbc	r21, r23
    1070:	be df       	rcall	.-132    	; 0xfee <_ZN6String4copyEPKcj>
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <_ZN6StringaSEPKc+0x22>
    1074:	76 df       	rcall	.-276    	; 0xf62 <_ZN6String10invalidateEv>
    1076:	ce 01       	movw	r24, r28
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <_ZN6StringC1Ehh>:
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	29 97       	sbiw	r28, 0x09	; 9
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	8c 01       	movw	r16, r24
    1098:	86 2f       	mov	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
    10a0:	13 82       	std	Z+3, r1	; 0x03
    10a2:	12 82       	std	Z+2, r1	; 0x02
    10a4:	15 82       	std	Z+5, r1	; 0x05
    10a6:	14 82       	std	Z+4, r1	; 0x04
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 3a 11 	call	0x2274	; 0x2274 <utoa>
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	c8 01       	movw	r24, r16
    10be:	ca df       	rcall	.-108    	; 0x1054 <_ZN6StringaSEPKc>
    10c0:	29 96       	adiw	r28, 0x09	; 9
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <_ZN6String6concatEPKcj>:
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	61 15       	cp	r22, r1
    10e4:	71 05       	cpc	r23, r1
    10e6:	11 f4       	brne	.+4      	; 0x10ec <_ZN6String6concatEPKcj+0x16>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	1b c0       	rjmp	.+54     	; 0x1122 <_ZN6String6concatEPKcj+0x4c>
    10ec:	41 15       	cp	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	b9 f0       	breq	.+46     	; 0x1120 <_ZN6String6concatEPKcj+0x4a>
    10f2:	7b 01       	movw	r14, r22
    10f4:	ec 01       	movw	r28, r24
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	8a 01       	movw	r16, r20
    10fc:	08 0f       	add	r16, r24
    10fe:	19 1f       	adc	r17, r25
    1100:	b8 01       	movw	r22, r16
    1102:	ce 01       	movw	r24, r28
    1104:	59 df       	rcall	.-334    	; 0xfb8 <_ZN6String7reserveEj>
    1106:	88 23       	and	r24, r24
    1108:	79 f3       	breq	.-34     	; 0x10e8 <_ZN6String6concatEPKcj+0x12>
    110a:	28 81       	ld	r18, Y
    110c:	39 81       	ldd	r19, Y+1	; 0x01
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	b7 01       	movw	r22, r14
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	0e 94 33 11 	call	0x2266	; 0x2266 <strcpy>
    111c:	1d 83       	std	Y+5, r17	; 0x05
    111e:	0c 83       	std	Y+4, r16	; 0x04
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <_ZN6String6concatERKS_>:
    1130:	fb 01       	movw	r30, r22
    1132:	44 81       	ldd	r20, Z+4	; 0x04
    1134:	55 81       	ldd	r21, Z+5	; 0x05
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	cd cf       	rjmp	.-102    	; 0x10d6 <_ZN6String6concatEPKcj>

0000113c <_ZNK6String6equalsEPKc>:
    113c:	fc 01       	movw	r30, r24
    113e:	24 81       	ldd	r18, Z+4	; 0x04
    1140:	35 81       	ldd	r19, Z+5	; 0x05
    1142:	23 2b       	or	r18, r19
    1144:	31 f4       	brne	.+12     	; 0x1152 <_ZNK6String6equalsEPKc+0x16>
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	61 15       	cp	r22, r1
    114a:	71 05       	cpc	r23, r1
    114c:	a1 f0       	breq	.+40     	; 0x1176 <_ZNK6String6equalsEPKc+0x3a>
    114e:	fb 01       	movw	r30, r22
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <_ZNK6String6equalsEPKc+0x26>
    1152:	fc 01       	movw	r30, r24
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	61 15       	cp	r22, r1
    115a:	71 05       	cpc	r23, r1
    115c:	31 f4       	brne	.+12     	; 0x116a <_ZNK6String6equalsEPKc+0x2e>
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	39 f0       	breq	.+14     	; 0x1176 <_ZNK6String6equalsEPKc+0x3a>
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <_ZNK6String6equalsEPKc+0x38>
    116a:	0e 94 2a 11 	call	0x2254	; 0x2254 <strcmp>
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	89 2b       	or	r24, r25
    1172:	09 f0       	breq	.+2      	; 0x1176 <_ZNK6String6equalsEPKc+0x3a>
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	82 2f       	mov	r24, r18
    1178:	08 95       	ret

0000117a <_ZNK6String9substringEjj>:
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	7c 01       	movw	r14, r24
    118e:	6b 01       	movw	r12, r22
    1190:	8a 01       	movw	r16, r20
    1192:	e9 01       	movw	r28, r18
    1194:	24 17       	cp	r18, r20
    1196:	35 07       	cpc	r19, r21
    1198:	20 f4       	brcc	.+8      	; 0x11a2 <_ZNK6String9substringEjj+0x28>
    119a:	81 2f       	mov	r24, r17
    119c:	89 01       	movw	r16, r18
    119e:	c4 2f       	mov	r28, r20
    11a0:	d8 2f       	mov	r29, r24
    11a2:	6c ea       	ldi	r22, 0xAC	; 172
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	c7 01       	movw	r24, r14
    11a8:	41 df       	rcall	.-382    	; 0x102c <_ZN6StringC1EPKc>
    11aa:	d6 01       	movw	r26, r12
    11ac:	14 96       	adiw	r26, 0x04	; 4
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	15 97       	sbiw	r26, 0x05	; 5
    11b4:	08 17       	cp	r16, r24
    11b6:	19 07       	cpc	r17, r25
    11b8:	c0 f4       	brcc	.+48     	; 0x11ea <_ZNK6String9substringEjj+0x70>
    11ba:	8c 17       	cp	r24, r28
    11bc:	9d 07       	cpc	r25, r29
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <_ZNK6String9substringEjj+0x48>
    11c0:	ec 01       	movw	r28, r24
    11c2:	d6 01       	movw	r26, r12
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	11 97       	sbiw	r26, 0x01	; 1
    11ca:	ec 0f       	add	r30, r28
    11cc:	fd 1f       	adc	r31, r29
    11ce:	b0 80       	ld	r11, Z
    11d0:	10 82       	st	Z, r1
    11d2:	6d 91       	ld	r22, X+
    11d4:	7c 91       	ld	r23, X
    11d6:	60 0f       	add	r22, r16
    11d8:	71 1f       	adc	r23, r17
    11da:	c7 01       	movw	r24, r14
    11dc:	3b df       	rcall	.-394    	; 0x1054 <_ZN6StringaSEPKc>
    11de:	d6 01       	movw	r26, r12
    11e0:	ed 91       	ld	r30, X+
    11e2:	fc 91       	ld	r31, X
    11e4:	ec 0f       	add	r30, r28
    11e6:	fd 1f       	adc	r31, r29
    11e8:	b0 82       	st	Z, r11
    11ea:	c7 01       	movw	r24, r14
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	08 95       	ret

00001200 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
	if (!buffer) return;
    1204:	fc 01       	movw	r30, r24
    1206:	c0 81       	ld	r28, Z
    1208:	d1 81       	ldd	r29, Z+1	; 0x01
    120a:	20 97       	sbiw	r28, 0x00	; 0
    120c:	41 f0       	breq	.+16     	; 0x121e <_ZN6String11toUpperCaseEv+0x1e>
	for (char *p = buffer; *p; p++) {
    120e:	88 81       	ld	r24, Y
    1210:	88 23       	and	r24, r24
    1212:	29 f0       	breq	.+10     	; 0x121e <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 19 11 	call	0x2232	; 0x2232 <toupper>
    121a:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    121c:	f8 cf       	rjmp	.-16     	; 0x120e <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	}
	if (cmdBuffer[0] != MF_ACK) {
		return STATUS_MIFARE_NACK;
	}
	return STATUS_OK;
} // End PCD_MIFARE_Transceive()
    1224:	bc 01       	movw	r22, r24
    1226:	6e 5f       	subi	r22, 0xFE	; 254
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	dc 01       	movw	r26, r24
    122c:	ed 91       	ld	r30, X+
    122e:	fc 91       	ld	r31, X
    1230:	01 90       	ld	r0, Z+
    1232:	f0 81       	ld	r31, Z
    1234:	e0 2d       	mov	r30, r0
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	19 95       	eicall
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	81 11       	cpse	r24, r1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	89 2f       	mov	r24, r25
    1242:	08 95       	ret

00001244 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1244:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <_ZN8SPIClass13interruptModeE>
    1248:	22 23       	and	r18, r18
    124a:	99 f0       	breq	.+38     	; 0x1272 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    124c:	4f b7       	in	r20, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <_ZN8SPIClass13interruptModeE>
    1254:	21 30       	cpi	r18, 0x01	; 1
    1256:	59 f4       	brne	.+22     	; 0x126e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1258:	2d b3       	in	r18, 0x1d	; 29
    125a:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <_ZN8SPIClass13interruptSaveE>
    125e:	3d b3       	in	r19, 0x1d	; 29
    1260:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <_ZN8SPIClass13interruptMaskE>
    1264:	20 95       	com	r18
    1266:	23 23       	and	r18, r19
    1268:	2d bb       	out	0x1d, r18	; 29
    126a:	4f bf       	out	0x3f, r20	; 63
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    126e:	40 93 26 04 	sts	0x0426, r20	; 0x800426 <_ZN8SPIClass13interruptSaveE>
    1272:	8c bd       	out	0x2c, r24	; 44
    1274:	9d bd       	out	0x2d, r25	; 45
    1276:	08 95       	ret

00001278 <_ZN8SPIClass8transferEh>:
    1278:	8e bd       	out	0x2e, r24	; 46
    127a:	00 00       	nop
    127c:	0d b4       	in	r0, 0x2d	; 45
    127e:	07 fe       	sbrs	r0, 7
    1280:	fd cf       	rjmp	.-6      	; 0x127c <_ZN8SPIClass8transferEh+0x4>
    1282:	8e b5       	in	r24, 0x2e	; 46
    1284:	08 95       	ret

00001286 <_ZN8SPIClass14endTransactionEv>:
    1286:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZN8SPIClass13interruptModeE>
    128a:	88 23       	and	r24, r24
    128c:	61 f0       	breq	.+24     	; 0x12a6 <_ZN8SPIClass14endTransactionEv+0x20>
    128e:	9f b7       	in	r25, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <_ZN8SPIClass13interruptModeE>
    1296:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <_ZN8SPIClass13interruptSaveE>
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	19 f4       	brne	.+6      	; 0x12a4 <_ZN8SPIClass14endTransactionEv+0x1e>
    129e:	8d bb       	out	0x1d, r24	; 29
    12a0:	9f bf       	out	0x3f, r25	; 63
    12a2:	08 95       	ret
    12a4:	8f bf       	out	0x3f, r24	; 63
    12a6:	08 95       	ret

000012a8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	6c 01       	movw	r12, r24
    12be:	a4 2e       	mov	r10, r20
    12c0:	79 01       	movw	r14, r18
    12c2:	60 68       	ori	r22, 0x80	; 128
    12c4:	b6 2e       	mov	r11, r22
    12c6:	83 e5       	ldi	r24, 0x53	; 83
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	bc df       	rcall	.-136    	; 0x1244 <_ZN8SPIClass16beginTransactionE11SPISettings>
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	f6 01       	movw	r30, r12
    12d0:	86 85       	ldd	r24, Z+14	; 0x0e
    12d2:	2e d5       	rcall	.+2652   	; 0x1d30 <digitalWrite>
    12d4:	aa 94       	dec	r10
    12d6:	8b 2d       	mov	r24, r11
    12d8:	cf df       	rcall	.-98     	; 0x1278 <_ZN8SPIClass8transferEh>
    12da:	00 23       	and	r16, r16
    12dc:	99 f0       	breq	.+38     	; 0x1304 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x5c>
    12de:	cf ef       	ldi	r28, 0xFF	; 255
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x3e>
    12e4:	cc 0f       	add	r28, r28
    12e6:	0a 95       	dec	r16
    12e8:	ea f7       	brpl	.-6      	; 0x12e4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x3c>
    12ea:	8b 2d       	mov	r24, r11
    12ec:	c5 df       	rcall	.-118    	; 0x1278 <_ZN8SPIClass8transferEh>
    12ee:	2c 2f       	mov	r18, r28
    12f0:	20 95       	com	r18
    12f2:	f7 01       	movw	r30, r14
    12f4:	90 81       	ld	r25, Z
    12f6:	92 23       	and	r25, r18
    12f8:	8c 23       	and	r24, r28
    12fa:	89 2b       	or	r24, r25
    12fc:	f7 01       	movw	r30, r14
    12fe:	80 83       	st	Z, r24
    1300:	11 e0       	ldi	r17, 0x01	; 1
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x5e>
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	81 2f       	mov	r24, r17
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	e7 01       	movw	r28, r14
    130c:	c8 0f       	add	r28, r24
    130e:	d9 1f       	adc	r29, r25
    1310:	1a 15       	cp	r17, r10
    1312:	28 f4       	brcc	.+10     	; 0x131e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x76>
    1314:	8b 2d       	mov	r24, r11
    1316:	b0 df       	rcall	.-160    	; 0x1278 <_ZN8SPIClass8transferEh>
    1318:	88 83       	st	Y, r24
    131a:	1f 5f       	subi	r17, 0xFF	; 255
    131c:	f4 cf       	rjmp	.-24     	; 0x1306 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x5e>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	ab df       	rcall	.-170    	; 0x1278 <_ZN8SPIClass8transferEh>
    1322:	88 83       	st	Y, r24
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	f6 01       	movw	r30, r12
    1328:	86 85       	ldd	r24, Z+14	; 0x0e
    132a:	02 d5       	rcall	.+2564   	; 0x1d30 <digitalWrite>
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	a2 cf       	rjmp	.-188    	; 0x1286 <_ZN8SPIClass14endTransactionEv>

00001342 <_ZN7MFRC522C1Ehh>:
    1342:	fc 01       	movw	r30, r24
    1344:	8a e6       	ldi	r24, 0x6A	; 106
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
    134c:	66 87       	std	Z+14, r22	; 0x0e
    134e:	47 87       	std	Z+15, r20	; 0x0f
    1350:	08 95       	ret

00001352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	06 2f       	mov	r16, r22
    135e:	14 2f       	mov	r17, r20
    1360:	83 e5       	ldi	r24, 0x53	; 83
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	6f df       	rcall	.-290    	; 0x1244 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	8e 85       	ldd	r24, Y+14	; 0x0e
    136a:	e2 d4       	rcall	.+2500   	; 0x1d30 <digitalWrite>
    136c:	80 2f       	mov	r24, r16
    136e:	84 df       	rcall	.-248    	; 0x1278 <_ZN8SPIClass8transferEh>
    1370:	81 2f       	mov	r24, r17
    1372:	82 df       	rcall	.-252    	; 0x1278 <_ZN8SPIClass8transferEh>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	8e 85       	ldd	r24, Y+14	; 0x0e
    1378:	db d4       	rcall	.+2486   	; 0x1d30 <digitalWrite>
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	81 cf       	rjmp	.-254    	; 0x1286 <_ZN8SPIClass14endTransactionEv>

00001384 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	8c 01       	movw	r16, r24
    1394:	c6 2f       	mov	r28, r22
    1396:	f4 2e       	mov	r15, r20
    1398:	d2 2e       	mov	r13, r18
    139a:	e3 2e       	mov	r14, r19
    139c:	83 e5       	ldi	r24, 0x53	; 83
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	51 df       	rcall	.-350    	; 0x1244 <_ZN8SPIClass16beginTransactionE11SPISettings>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	f8 01       	movw	r30, r16
    13a6:	86 85       	ldd	r24, Z+14	; 0x0e
    13a8:	c3 d4       	rcall	.+2438   	; 0x1d30 <digitalWrite>
    13aa:	8c 2f       	mov	r24, r28
    13ac:	65 df       	rcall	.-310    	; 0x1278 <_ZN8SPIClass8transferEh>
    13ae:	cd 2d       	mov	r28, r13
    13b0:	de 2d       	mov	r29, r14
    13b2:	ce 01       	movw	r24, r28
    13b4:	8f 0d       	add	r24, r15
    13b6:	91 1d       	adc	r25, r1
    13b8:	7c 01       	movw	r14, r24
    13ba:	ec 16       	cp	r14, r28
    13bc:	fd 06       	cpc	r15, r29
    13be:	19 f0       	breq	.+6      	; 0x13c6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x42>
    13c0:	89 91       	ld	r24, Y+
    13c2:	5a df       	rcall	.-332    	; 0x1278 <_ZN8SPIClass8transferEh>
    13c4:	fa cf       	rjmp	.-12     	; 0x13ba <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x36>
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	f8 01       	movw	r30, r16
    13ca:	86 85       	ldd	r24, Z+14	; 0x0e
    13cc:	b1 d4       	rcall	.+2402   	; 0x1d30 <digitalWrite>
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	54 cf       	rjmp	.-344    	; 0x1286 <_ZN8SPIClass14endTransactionEv>

000013de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
    13e6:	16 2f       	mov	r17, r22
    13e8:	83 e5       	ldi	r24, 0x53	; 83
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	2b df       	rcall	.-426    	; 0x1244 <_ZN8SPIClass16beginTransactionE11SPISettings>
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f2:	9e d4       	rcall	.+2364   	; 0x1d30 <digitalWrite>
    13f4:	81 2f       	mov	r24, r17
    13f6:	80 68       	ori	r24, 0x80	; 128
    13f8:	3f df       	rcall	.-386    	; 0x1278 <_ZN8SPIClass8transferEh>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	3d df       	rcall	.-390    	; 0x1278 <_ZN8SPIClass8transferEh>
    13fe:	18 2f       	mov	r17, r24
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	8e 85       	ldd	r24, Y+14	; 0x0e
    1404:	95 d4       	rcall	.+2346   	; 0x1d30 <digitalWrite>
    1406:	3f df       	rcall	.-386    	; 0x1286 <_ZN8SPIClass14endTransactionEv>
    1408:	81 2f       	mov	r24, r17
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	08 95       	ret

00001412 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    1412:	0f 93       	push	r16
    1414:	41 11       	cpse	r20, r1
    1416:	48 df       	rcall	.-368    	; 0x12a8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	8c 01       	movw	r16, r24
    1426:	d6 2f       	mov	r29, r22
    1428:	c4 2f       	mov	r28, r20
    142a:	d9 df       	rcall	.-78     	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    142c:	48 2f       	mov	r20, r24
    142e:	4c 2b       	or	r20, r28
    1430:	6d 2f       	mov	r22, r29
    1432:	c8 01       	movw	r24, r16
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	8a cf       	rjmp	.-236    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

0000143e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	8c 01       	movw	r16, r24
    1448:	d6 2f       	mov	r29, r22
    144a:	c4 2f       	mov	r28, r20
    144c:	c8 df       	rcall	.-112    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    144e:	c0 95       	com	r28
    1450:	4c 2f       	mov	r20, r28
    1452:	48 23       	and	r20, r24
    1454:	6d 2f       	mov	r22, r29
    1456:	c8 01       	movw	r24, r16
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	78 cf       	rjmp	.-272    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00001462 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	ec 01       	movw	r28, r24
    1474:	6b 01       	movw	r12, r22
    1476:	14 2f       	mov	r17, r20
    1478:	79 01       	movw	r14, r18
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	62 e0       	ldi	r22, 0x02	; 2
    147e:	69 df       	rcall	.-302    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1480:	44 e0       	ldi	r20, 0x04	; 4
    1482:	6a e0       	ldi	r22, 0x0A	; 10
    1484:	ce 01       	movw	r24, r28
    1486:	65 df       	rcall	.-310    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	64 e1       	ldi	r22, 0x14	; 20
    148c:	ce 01       	movw	r24, r28
    148e:	61 df       	rcall	.-318    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1490:	96 01       	movw	r18, r12
    1492:	41 2f       	mov	r20, r17
    1494:	62 e1       	ldi	r22, 0x12	; 18
    1496:	ce 01       	movw	r24, r28
    1498:	75 df       	rcall	.-278    	; 0x1384 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    149a:	43 e0       	ldi	r20, 0x03	; 3
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	ce 01       	movw	r24, r28
    14a0:	58 df       	rcall	.-336    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    14a2:	08 e8       	ldi	r16, 0x88	; 136
    14a4:	13 e1       	ldi	r17, 0x13	; 19
    14a6:	6a e0       	ldi	r22, 0x0A	; 10
    14a8:	ce 01       	movw	r24, r28
    14aa:	99 df       	rcall	.-206    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    14ac:	82 ff       	sbrs	r24, 2
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x6e>
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	ce 01       	movw	r24, r28
    14b6:	4d df       	rcall	.-358    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    14b8:	64 e4       	ldi	r22, 0x44	; 68
    14ba:	ce 01       	movw	r24, r28
    14bc:	90 df       	rcall	.-224    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    14be:	f7 01       	movw	r30, r14
    14c0:	80 83       	st	Z, r24
    14c2:	62 e4       	ldi	r22, 0x42	; 66
    14c4:	ce 01       	movw	r24, r28
    14c6:	8b df       	rcall	.-234    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    14c8:	f7 01       	movw	r30, r14
    14ca:	81 83       	std	Z+1, r24	; 0x01
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x76>
    14d0:	01 50       	subi	r16, 0x01	; 1
    14d2:	11 09       	sbc	r17, r1
    14d4:	41 f7       	brne	.-48     	; 0x14a6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x44>
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	08 95       	ret

000014ea <_ZN7MFRC5229PCD_ResetEv>:
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	8c 01       	movw	r16, r24
    14f2:	4f e0       	ldi	r20, 0x0F	; 15
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	2d df       	rcall	.-422    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    14f8:	c3 e0       	ldi	r28, 0x03	; 3
    14fa:	62 e3       	ldi	r22, 0x32	; 50
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	84 dc       	rcall	.-1784   	; 0xe0c <delay>
    1504:	62 e0       	ldi	r22, 0x02	; 2
    1506:	c8 01       	movw	r24, r16
    1508:	6a df       	rcall	.-300    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    150a:	84 ff       	sbrs	r24, 4
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <_ZN7MFRC5229PCD_ResetEv+0x28>
    150e:	c1 50       	subi	r28, 0x01	; 1
    1510:	a1 f7       	brne	.-24     	; 0x14fa <_ZN7MFRC5229PCD_ResetEv+0x10>
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <_ZN7MFRC52213PCD_AntennaOnEv>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	68 e2       	ldi	r22, 0x28	; 40
    1522:	5d df       	rcall	.-326    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1524:	98 2f       	mov	r25, r24
    1526:	93 70       	andi	r25, 0x03	; 3
    1528:	93 30       	cpi	r25, 0x03	; 3
    152a:	39 f0       	breq	.+14     	; 0x153a <_ZN7MFRC52213PCD_AntennaOnEv+0x20>
    152c:	48 2f       	mov	r20, r24
    152e:	43 60       	ori	r20, 0x03	; 3
    1530:	68 e2       	ldi	r22, 0x28	; 40
    1532:	ce 01       	movw	r24, r28
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	0c cf       	rjmp	.-488    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <_ZN7MFRC5228PCD_InitEv>:
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ec 01       	movw	r28, r24
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	8e 85       	ldd	r24, Y+14	; 0x0e
    154a:	b6 d3       	rcall	.+1900   	; 0x1cb8 <pinMode>
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1550:	ef d3       	rcall	.+2014   	; 0x1d30 <digitalWrite>
    1552:	8f 85       	ldd	r24, Y+15	; 0x0f
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	09 f4       	brne	.+2      	; 0x155a <_ZN7MFRC5228PCD_InitEv+0x1a>
    1558:	40 c0       	rjmp	.+128    	; 0x15da <_ZN7MFRC5228PCD_InitEv+0x9a>
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	ad d3       	rcall	.+1882   	; 0x1cb8 <pinMode>
    155e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1560:	15 d4       	rcall	.+2090   	; 0x1d8c <digitalRead>
    1562:	89 2b       	or	r24, r25
    1564:	09 f0       	breq	.+2      	; 0x1568 <_ZN7MFRC5228PCD_InitEv+0x28>
    1566:	39 c0       	rjmp	.+114    	; 0x15da <_ZN7MFRC5228PCD_InitEv+0x9a>
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	8f 85       	ldd	r24, Y+15	; 0x0f
    156c:	a5 d3       	rcall	.+1866   	; 0x1cb8 <pinMode>
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	8f 85       	ldd	r24, Y+15	; 0x0f
    1572:	de d3       	rcall	.+1980   	; 0x1d30 <digitalWrite>
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	82 dc       	rcall	.-1788   	; 0xe7e <delayMicroseconds>
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	d8 d3       	rcall	.+1968   	; 0x1d30 <digitalWrite>
    1580:	62 e3       	ldi	r22, 0x32	; 50
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	41 dc       	rcall	.-1918   	; 0xe0c <delay>
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	64 e2       	ldi	r22, 0x24	; 36
    158e:	ce 01       	movw	r24, r28
    1590:	e0 de       	rcall	.-576    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	66 e2       	ldi	r22, 0x26	; 38
    1596:	ce 01       	movw	r24, r28
    1598:	dc de       	rcall	.-584    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    159a:	46 e2       	ldi	r20, 0x26	; 38
    159c:	68 e4       	ldi	r22, 0x48	; 72
    159e:	ce 01       	movw	r24, r28
    15a0:	d8 de       	rcall	.-592    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	64 e5       	ldi	r22, 0x54	; 84
    15a6:	ce 01       	movw	r24, r28
    15a8:	d4 de       	rcall	.-600    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15aa:	49 ea       	ldi	r20, 0xA9	; 169
    15ac:	66 e5       	ldi	r22, 0x56	; 86
    15ae:	ce 01       	movw	r24, r28
    15b0:	d0 de       	rcall	.-608    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15b2:	43 e0       	ldi	r20, 0x03	; 3
    15b4:	68 e5       	ldi	r22, 0x58	; 88
    15b6:	ce 01       	movw	r24, r28
    15b8:	cc de       	rcall	.-616    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15ba:	48 ee       	ldi	r20, 0xE8	; 232
    15bc:	6a e5       	ldi	r22, 0x5A	; 90
    15be:	ce 01       	movw	r24, r28
    15c0:	c8 de       	rcall	.-624    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15c2:	40 e4       	ldi	r20, 0x40	; 64
    15c4:	6a e2       	ldi	r22, 0x2A	; 42
    15c6:	ce 01       	movw	r24, r28
    15c8:	c4 de       	rcall	.-632    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15ca:	4d e3       	ldi	r20, 0x3D	; 61
    15cc:	62 e2       	ldi	r22, 0x22	; 34
    15ce:	ce 01       	movw	r24, r28
    15d0:	c0 de       	rcall	.-640    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    15d2:	ce 01       	movw	r24, r28
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	a0 cf       	rjmp	.-192    	; 0x151a <_ZN7MFRC52213PCD_AntennaOnEv>
    15da:	ce 01       	movw	r24, r28
    15dc:	86 df       	rcall	.-244    	; 0x14ea <_ZN7MFRC5229PCD_ResetEv>
    15de:	d5 cf       	rjmp	.-86     	; 0x158a <_ZN7MFRC5228PCD_InitEv+0x4a>

000015e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    15e0:	3f 92       	push	r3
    15e2:	4f 92       	push	r4
    15e4:	5f 92       	push	r5
    15e6:	6f 92       	push	r6
    15e8:	7f 92       	push	r7
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	1f 92       	push	r1
    1604:	1f 92       	push	r1
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	3c 01       	movw	r6, r24
    160c:	16 2f       	mov	r17, r22
    160e:	94 2e       	mov	r9, r20
    1610:	29 01       	movw	r4, r18
    1612:	a1 14       	cp	r10, r1
    1614:	b1 04       	cpc	r11, r1
    1616:	19 f0       	breq	.+6      	; 0x161e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    1618:	f5 01       	movw	r30, r10
    161a:	40 81       	ld	r20, Z
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x40>
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	34 2e       	mov	r3, r20
    1622:	f0 e1       	ldi	r31, 0x10	; 16
    1624:	8f 9e       	mul	r8, r31
    1626:	30 0c       	add	r3, r0
    1628:	11 24       	eor	r1, r1
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	c3 01       	movw	r24, r6
    1630:	90 de       	rcall	.-736    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	68 e0       	ldi	r22, 0x08	; 8
    1636:	c3 01       	movw	r24, r6
    1638:	8c de       	rcall	.-744    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	64 e1       	ldi	r22, 0x14	; 20
    163e:	c3 01       	movw	r24, r6
    1640:	88 de       	rcall	.-752    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1642:	92 01       	movw	r18, r4
    1644:	40 2f       	mov	r20, r16
    1646:	62 e1       	ldi	r22, 0x12	; 18
    1648:	c3 01       	movw	r24, r6
    164a:	9c de       	rcall	.-712    	; 0x1384 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    164c:	43 2d       	mov	r20, r3
    164e:	6a e1       	ldi	r22, 0x1A	; 26
    1650:	c3 01       	movw	r24, r6
    1652:	7f de       	rcall	.-770    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1654:	41 2f       	mov	r20, r17
    1656:	62 e0       	ldi	r22, 0x02	; 2
    1658:	c3 01       	movw	r24, r6
    165a:	7b de       	rcall	.-778    	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    165c:	1c 30       	cpi	r17, 0x0C	; 12
    165e:	21 f4       	brne	.+8      	; 0x1668 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	6a e1       	ldi	r22, 0x1A	; 26
    1664:	c3 01       	movw	r24, r6
    1666:	da de       	rcall	.-588    	; 0x141c <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    1668:	00 ed       	ldi	r16, 0xD0	; 208
    166a:	17 e0       	ldi	r17, 0x07	; 7
    166c:	68 e0       	ldi	r22, 0x08	; 8
    166e:	c3 01       	movw	r24, r6
    1670:	b6 de       	rcall	.-660    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1672:	98 2f       	mov	r25, r24
    1674:	99 21       	and	r25, r9
    1676:	39 f4       	brne	.+14     	; 0x1686 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa6>
    1678:	80 fd       	sbrc	r24, 0
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa2>
    167c:	01 50       	subi	r16, 0x01	; 1
    167e:	11 09       	sbc	r17, r1
    1680:	a9 f7       	brne	.-22     	; 0x166c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x8c>
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	60 c0       	rjmp	.+192    	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    1686:	6c e0       	ldi	r22, 0x0C	; 12
    1688:	c3 01       	movw	r24, r6
    168a:	a9 de       	rcall	.-686    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    168c:	18 2f       	mov	r17, r24
    168e:	83 71       	andi	r24, 0x13	; 19
    1690:	09 f0       	breq	.+2      	; 0x1694 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    1692:	56 c0       	rjmp	.+172    	; 0x1740 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x160>
    1694:	e1 14       	cp	r14, r1
    1696:	f1 04       	cpc	r15, r1
    1698:	e1 f0       	breq	.+56     	; 0x16d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
    169a:	c1 14       	cp	r12, r1
    169c:	d1 04       	cpc	r13, r1
    169e:	c9 f0       	breq	.+50     	; 0x16d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
    16a0:	64 e1       	ldi	r22, 0x14	; 20
    16a2:	c3 01       	movw	r24, r6
    16a4:	9c de       	rcall	.-712    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    16a6:	f6 01       	movw	r30, r12
    16a8:	90 81       	ld	r25, Z
    16aa:	98 17       	cp	r25, r24
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd0>
    16ae:	42 c0       	rjmp	.+132    	; 0x1734 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x154>
    16b0:	80 83       	st	Z, r24
    16b2:	08 2d       	mov	r16, r8
    16b4:	97 01       	movw	r18, r14
    16b6:	48 2f       	mov	r20, r24
    16b8:	62 e1       	ldi	r22, 0x12	; 18
    16ba:	c3 01       	movw	r24, r6
    16bc:	aa de       	rcall	.-684    	; 0x1412 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    16be:	68 e1       	ldi	r22, 0x18	; 24
    16c0:	c3 01       	movw	r24, r6
    16c2:	8d de       	rcall	.-742    	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    16c4:	87 70       	andi	r24, 0x07	; 7
    16c6:	a1 14       	cp	r10, r1
    16c8:	b1 04       	cpc	r11, r1
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf4>
    16cc:	f5 01       	movw	r30, r10
    16ce:	80 83       	st	Z, r24
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf4>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	13 fd       	sbrc	r17, 3
    16d6:	30 c0       	rjmp	.+96     	; 0x1738 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x158>
    16d8:	e1 14       	cp	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	79 f1       	breq	.+94     	; 0x173c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    16de:	c1 14       	cp	r12, r1
    16e0:	d1 04       	cpc	r13, r1
    16e2:	61 f1       	breq	.+88     	; 0x173c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    16e4:	9f 89       	ldd	r25, Y+23	; 0x17
    16e6:	99 23       	and	r25, r25
    16e8:	49 f1       	breq	.+82     	; 0x173c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    16ea:	f6 01       	movw	r30, r12
    16ec:	40 81       	ld	r20, Z
    16ee:	41 30       	cpi	r20, 0x01	; 1
    16f0:	21 f4       	brne	.+8      	; 0x16fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11a>
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	39 f5       	brne	.+78     	; 0x1744 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	26 c0       	rjmp	.+76     	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    16fa:	42 30       	cpi	r20, 0x02	; 2
    16fc:	18 f1       	brcs	.+70     	; 0x1744 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    16fe:	81 11       	cpse	r24, r1
    1700:	21 c0       	rjmp	.+66     	; 0x1744 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    1702:	42 50       	subi	r20, 0x02	; 2
    1704:	9e 01       	movw	r18, r28
    1706:	2f 5f       	subi	r18, 0xFF	; 255
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	b7 01       	movw	r22, r14
    170c:	c3 01       	movw	r24, r6
    170e:	a9 de       	rcall	.-686    	; 0x1462 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1710:	81 11       	cpse	r24, r1
    1712:	19 c0       	rjmp	.+50     	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    1714:	f6 01       	movw	r30, r12
    1716:	80 81       	ld	r24, Z
    1718:	e8 0e       	add	r14, r24
    171a:	f1 1c       	adc	r15, r1
    171c:	f7 01       	movw	r30, r14
    171e:	32 97       	sbiw	r30, 0x02	; 2
    1720:	90 81       	ld	r25, Z
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	98 13       	cpse	r25, r24
    1726:	0e c0       	rjmp	.+28     	; 0x1744 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    1728:	31 96       	adiw	r30, 0x01	; 1
    172a:	90 81       	ld	r25, Z
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	98 13       	cpse	r25, r24
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    1732:	04 c0       	rjmp	.+8      	; 0x173c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	9f 90       	pop	r9
    1760:	8f 90       	pop	r8
    1762:	7f 90       	pop	r7
    1764:	6f 90       	pop	r6
    1766:	5f 90       	pop	r5
    1768:	4f 90       	pop	r4
    176a:	3f 90       	pop	r3
    176c:	08 95       	ret

0000176e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    176e:	8f 92       	push	r8
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	af 92       	push	r10
    1782:	8c 2c       	mov	r8, r12
    1784:	57 01       	movw	r10, r14
    1786:	68 01       	movw	r12, r16
    1788:	79 01       	movw	r14, r18
    178a:	04 2f       	mov	r16, r20
    178c:	9b 01       	movw	r18, r22
    178e:	40 e3       	ldi	r20, 0x30	; 48
    1790:	6c e0       	ldi	r22, 0x0C	; 12
    1792:	26 df       	rcall	.-436    	; 0x15e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    1794:	0f 90       	pop	r0
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	bf 90       	pop	r11
    17a4:	af 90       	pop	r10
    17a6:	8f 90       	pop	r8
    17a8:	08 95       	ret

000017aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    17aa:	2f 92       	push	r2
    17ac:	3f 92       	push	r3
    17ae:	4f 92       	push	r4
    17b0:	5f 92       	push	r5
    17b2:	6f 92       	push	r6
    17b4:	7f 92       	push	r7
    17b6:	8f 92       	push	r8
    17b8:	9f 92       	push	r9
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	2c 97       	sbiw	r28, 0x0c	; 12
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	41 35       	cpi	r20, 0x51	; 81
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    17e2:	00 c1       	rjmp	.+512    	; 0x19e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23a>
    17e4:	34 2e       	mov	r3, r20
    17e6:	3b 01       	movw	r6, r22
    17e8:	4c 01       	movw	r8, r24
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	6c e1       	ldi	r22, 0x1C	; 28
    17ee:	27 de       	rcall	.-946    	; 0x143e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    17f0:	22 24       	eor	r2, r2
    17f2:	23 94       	inc	r2
    17f4:	32 e0       	ldi	r19, 0x02	; 2
    17f6:	23 16       	cp	r2, r19
    17f8:	91 f0       	breq	.+36     	; 0x181e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	28 16       	cp	r2, r24
    17fe:	e1 f0       	breq	.+56     	; 0x1838 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	29 12       	cpse	r2, r25
    1804:	f3 c0       	rjmp	.+486    	; 0x19ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    1806:	83 e9       	ldi	r24, 0x93	; 147
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	33 20       	and	r3, r3
    180c:	d1 f0       	breq	.+52     	; 0x1842 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	f3 01       	movw	r30, r6
    1812:	90 81       	ld	r25, Z
    1814:	95 30       	cpi	r25, 0x05	; 5
    1816:	08 f4       	brcc	.+2      	; 0x181a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	b1 2c       	mov	r11, r1
    181c:	17 c0       	rjmp	.+46     	; 0x184c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    181e:	f5 e9       	ldi	r31, 0x95	; 149
    1820:	f9 83       	std	Y+1, r31	; 0x01
    1822:	33 20       	and	r3, r3
    1824:	81 f0       	breq	.+32     	; 0x1846 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	f3 01       	movw	r30, r6
    182a:	90 81       	ld	r25, Z
    182c:	98 30       	cpi	r25, 0x08	; 8
    182e:	08 f4       	brcc	.+2      	; 0x1832 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	43 e0       	ldi	r20, 0x03	; 3
    1834:	b4 2e       	mov	r11, r20
    1836:	0a c0       	rjmp	.+20     	; 0x184c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    1838:	87 e9       	ldi	r24, 0x97	; 151
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	36 e0       	ldi	r19, 0x06	; 6
    183e:	b3 2e       	mov	r11, r19
    1840:	04 c0       	rjmp	.+8      	; 0x184a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    1842:	b1 2c       	mov	r11, r1
    1844:	02 c0       	rjmp	.+4      	; 0x184a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    1846:	23 e0       	ldi	r18, 0x03	; 3
    1848:	b2 2e       	mov	r11, r18
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	d3 2c       	mov	r13, r3
    184e:	f8 e0       	ldi	r31, 0x08	; 8
    1850:	bf 9e       	mul	r11, r31
    1852:	d0 18       	sub	r13, r0
    1854:	11 24       	eor	r1, r1
    1856:	d7 fc       	sbrc	r13, 7
    1858:	d1 2c       	mov	r13, r1
    185a:	88 23       	and	r24, r24
    185c:	21 f0       	breq	.+8      	; 0x1866 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbc>
    185e:	98 e8       	ldi	r25, 0x88	; 136
    1860:	9b 83       	std	Y+3, r25	; 0x03
    1862:	33 e0       	ldi	r19, 0x03	; 3
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    1866:	32 e0       	ldi	r19, 0x02	; 2
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	9d 2d       	mov	r25, r13
    186c:	97 70       	andi	r25, 0x07	; 7
    186e:	09 f4       	brne	.+2      	; 0x1872 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc8>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	9d 2d       	mov	r25, r13
    1874:	95 95       	asr	r25
    1876:	95 95       	asr	r25
    1878:	95 95       	asr	r25
    187a:	29 0f       	add	r18, r25
    187c:	31 f4       	brne	.+12     	; 0x188a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe0>
    187e:	88 23       	and	r24, r24
    1880:	09 f4       	brne	.+2      	; 0x1884 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xda>
    1882:	8d c0       	rjmp	.+282    	; 0x199e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    1884:	38 e0       	ldi	r19, 0x08	; 8
    1886:	d3 0e       	add	r13, r19
    1888:	8a c0       	rjmp	.+276    	; 0x199e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    188a:	81 11       	cpse	r24, r1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe8>
    188e:	94 e0       	ldi	r25, 0x04	; 4
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	29 17       	cp	r18, r25
    1896:	08 f4       	brcc	.+2      	; 0x189a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
    1898:	92 2f       	mov	r25, r18
    189a:	eb 2d       	mov	r30, r11
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	31 96       	adiw	r30, 0x01	; 1
    18a0:	e6 0d       	add	r30, r6
    18a2:	f7 1d       	adc	r31, r7
    18a4:	23 2f       	mov	r18, r19
    18a6:	41 91       	ld	r20, Z+
    18a8:	a1 e0       	ldi	r26, 0x01	; 1
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ac 0f       	add	r26, r28
    18ae:	bd 1f       	adc	r27, r29
    18b0:	a2 0f       	add	r26, r18
    18b2:	b1 1d       	adc	r27, r1
    18b4:	4c 93       	st	X, r20
    18b6:	2f 5f       	subi	r18, 0xFF	; 255
    18b8:	42 2f       	mov	r20, r18
    18ba:	43 1b       	sub	r20, r19
    18bc:	49 17       	cp	r20, r25
    18be:	98 f3       	brcs	.-26     	; 0x18a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfc>
    18c0:	de cf       	rjmp	.-68     	; 0x187e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd4>
    18c2:	81 11       	cpse	r24, r1
    18c4:	d8 c0       	rjmp	.+432    	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    18c6:	9f e1       	ldi	r25, 0x1F	; 31
    18c8:	9d 15       	cp	r25, r13
    18ca:	0c f4       	brge	.+2      	; 0x18ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x124>
    18cc:	91 c0       	rjmp	.+290    	; 0x19f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x246>
    18ce:	80 e2       	ldi	r24, 0x20	; 32
    18d0:	d8 2e       	mov	r13, r24
    18d2:	90 e7       	ldi	r25, 0x70	; 112
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	89 27       	eor	r24, r25
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	89 27       	eor	r24, r25
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	89 27       	eor	r24, r25
    18e4:	8f 83       	std	Y+7, r24	; 0x07
    18e6:	9e 01       	movw	r18, r28
    18e8:	28 5f       	subi	r18, 0xF8	; 248
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	47 e0       	ldi	r20, 0x07	; 7
    18ee:	be 01       	movw	r22, r28
    18f0:	6f 5f       	subi	r22, 0xFF	; 255
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	c4 01       	movw	r24, r8
    18f6:	b5 dd       	rcall	.-1174   	; 0x1462 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    18f8:	81 11       	cpse	r24, r1
    18fa:	bd c0       	rjmp	.+378    	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    18fc:	1b 86       	std	Y+11, r1	; 0x0b
    18fe:	e3 e0       	ldi	r30, 0x03	; 3
    1900:	ea 87       	std	Y+10, r30	; 0x0a
    1902:	ce 01       	movw	r24, r28
    1904:	07 96       	adiw	r24, 0x07	; 7
    1906:	2c 01       	movw	r4, r24
    1908:	99 e0       	ldi	r25, 0x09	; 9
    190a:	9c 87       	std	Y+12, r25	; 0x0c
    190c:	cb 84       	ldd	r12, Y+11	; 0x0b
    190e:	4c 2d       	mov	r20, r12
    1910:	42 95       	swap	r20
    1912:	40 7f       	andi	r20, 0xF0	; 240
    1914:	4c 0d       	add	r20, r12
    1916:	6a e1       	ldi	r22, 0x1A	; 26
    1918:	c4 01       	movw	r24, r8
    191a:	1b dd       	rcall	.-1482   	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    191c:	a1 2c       	mov	r10, r1
    191e:	ce 01       	movw	r24, r28
    1920:	0b 96       	adiw	r24, 0x0b	; 11
    1922:	7c 01       	movw	r14, r24
    1924:	8e 01       	movw	r16, r28
    1926:	06 5f       	subi	r16, 0xF6	; 246
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	92 01       	movw	r18, r4
    192c:	4c 85       	ldd	r20, Y+12	; 0x0c
    192e:	be 01       	movw	r22, r28
    1930:	6f 5f       	subi	r22, 0xFF	; 255
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	c4 01       	movw	r24, r8
    1936:	1b df       	rcall	.-458    	; 0x176e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	09 f0       	breq	.+2      	; 0x193e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    193c:	c2 cf       	rjmp	.-124    	; 0x18c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x118>
    193e:	6c e1       	ldi	r22, 0x1C	; 28
    1940:	c4 01       	movw	r24, r8
    1942:	4d dd       	rcall	.-1382   	; 0x13de <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1944:	85 fd       	sbrc	r24, 5
    1946:	50 c0       	rjmp	.+160    	; 0x19e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23e>
    1948:	8f 71       	andi	r24, 0x1F	; 31
    194a:	09 f4       	brne	.+2      	; 0x194e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4d 2d       	mov	r20, r13
    1954:	dd 0c       	add	r13, r13
    1956:	55 0b       	sbc	r21, r21
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	0c f0       	brlt	.+2      	; 0x1960 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1b6>
    195e:	46 c0       	rjmp	.+140    	; 0x19ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    1960:	d8 2e       	mov	r13, r24
    1962:	85 95       	asr	r24
    1964:	85 95       	asr	r24
    1966:	85 95       	asr	r24
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	98 0f       	add	r25, r24
    196c:	42 2f       	mov	r20, r18
    196e:	47 70       	andi	r20, 0x07	; 7
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	09 f4       	brne	.+2      	; 0x1976 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1cc>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	89 0f       	add	r24, r25
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ec 0f       	add	r30, r28
    197e:	fd 1f       	adc	r31, r29
    1980:	e8 0f       	add	r30, r24
    1982:	f1 1d       	adc	r31, r1
    1984:	21 50       	subi	r18, 0x01	; 1
    1986:	31 09       	sbc	r19, r1
    1988:	27 70       	andi	r18, 0x07	; 7
    198a:	33 27       	eor	r19, r19
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ea>
    1992:	88 0f       	add	r24, r24
    1994:	2a 95       	dec	r18
    1996:	ea f7       	brpl	.-6      	; 0x1992 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e8>
    1998:	90 81       	ld	r25, Z
    199a:	89 2b       	or	r24, r25
    199c:	80 83       	st	Z, r24
    199e:	8f e1       	ldi	r24, 0x1F	; 31
    19a0:	8d 15       	cp	r24, r13
    19a2:	0c f4       	brge	.+2      	; 0x19a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    19a4:	96 cf       	rjmp	.-212    	; 0x18d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
    19a6:	9d 2d       	mov	r25, r13
    19a8:	97 70       	andi	r25, 0x07	; 7
    19aa:	9b 87       	std	Y+11, r25	; 0x0b
    19ac:	8d 2d       	mov	r24, r13
    19ae:	85 95       	asr	r24
    19b0:	85 95       	asr	r24
    19b2:	85 95       	asr	r24
    19b4:	8e 5f       	subi	r24, 0xFE	; 254
    19b6:	29 2f       	mov	r18, r25
    19b8:	e0 e1       	ldi	r30, 0x10	; 16
    19ba:	8e 9f       	mul	r24, r30
    19bc:	20 0d       	add	r18, r0
    19be:	11 24       	eor	r1, r1
    19c0:	2a 83       	std	Y+2, r18	; 0x02
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	91 11       	cpse	r25, r1
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x220>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	28 0f       	add	r18, r24
    19cc:	2c 87       	std	Y+12, r18	; 0x0c
    19ce:	44 24       	eor	r4, r4
    19d0:	43 94       	inc	r4
    19d2:	51 2c       	mov	r5, r1
    19d4:	4c 0e       	add	r4, r28
    19d6:	5d 1e       	adc	r5, r29
    19d8:	48 0e       	add	r4, r24
    19da:	51 1c       	adc	r5, r1
    19dc:	f9 e0       	ldi	r31, 0x09	; 9
    19de:	f8 1b       	sub	r31, r24
    19e0:	fa 87       	std	Y+10, r31	; 0x0a
    19e2:	94 cf       	rjmp	.-216    	; 0x190c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x162>
    19e4:	86 e0       	ldi	r24, 0x06	; 6
    19e6:	47 c0       	rjmp	.+142    	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	45 c0       	rjmp	.+138    	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    19ec:	85 e0       	ldi	r24, 0x05	; 5
    19ee:	43 c0       	rjmp	.+134    	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 38       	cpi	r24, 0x88	; 136
    19f4:	e9 f1       	breq	.+122    	; 0x1a70 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c6>
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	94 e0       	ldi	r25, 0x04	; 4
    19fa:	eb 2d       	mov	r30, r11
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	31 96       	adiw	r30, 0x01	; 1
    1a00:	e6 0d       	add	r30, r6
    1a02:	f7 1d       	adc	r31, r7
    1a04:	98 0f       	add	r25, r24
    1a06:	a1 e0       	ldi	r26, 0x01	; 1
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ac 0f       	add	r26, r28
    1a0c:	bd 1f       	adc	r27, r29
    1a0e:	a8 0f       	add	r26, r24
    1a10:	b1 1d       	adc	r27, r1
    1a12:	2c 91       	ld	r18, X
    1a14:	21 93       	st	Z+, r18
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	98 13       	cpse	r25, r24
    1a1a:	f5 cf       	rjmp	.-22     	; 0x1a06 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25c>
    1a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	19 f5       	brne	.+70     	; 0x1a68 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    1a22:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a24:	81 11       	cpse	r24, r1
    1a26:	20 c0       	rjmp	.+64     	; 0x1a68 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2d 5f       	subi	r18, 0xFD	; 253
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	b2 01       	movw	r22, r4
    1a32:	c4 01       	movw	r24, r8
    1a34:	16 dd       	rcall	.-1492   	; 0x1462 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1a36:	81 11       	cpse	r24, r1
    1a38:	1e c0       	rjmp	.+60     	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	f2 01       	movw	r30, r4
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	98 13       	cpse	r25, r24
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	98 13       	cpse	r25, r24
    1a4a:	10 c0       	rjmp	.+32     	; 0x1a6c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    1a4c:	80 81       	ld	r24, Z
    1a4e:	82 ff       	sbrs	r24, 2
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ac>
    1a52:	23 94       	inc	r2
    1a54:	cf ce       	rjmp	.-610    	; 0x17f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a>
    1a56:	f3 01       	movw	r30, r6
    1a58:	83 87       	std	Z+11, r24	; 0x0b
    1a5a:	82 2d       	mov	r24, r2
    1a5c:	88 0f       	add	r24, r24
    1a5e:	82 0d       	add	r24, r2
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 83       	st	Z, r24
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	07 c0       	rjmp	.+14     	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1a6c:	87 e0       	ldi	r24, 0x07	; 7
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	93 e0       	ldi	r25, 0x03	; 3
    1a74:	c2 cf       	rjmp	.-124    	; 0x19fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    1a76:	2c 96       	adiw	r28, 0x0c	; 12
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	bf 90       	pop	r11
    1a94:	af 90       	pop	r10
    1a96:	9f 90       	pop	r9
    1a98:	8f 90       	pop	r8
    1a9a:	7f 90       	pop	r7
    1a9c:	6f 90       	pop	r6
    1a9e:	5f 90       	pop	r5
    1aa0:	4f 90       	pop	r4
    1aa2:	3f 90       	pop	r3
    1aa4:	2f 90       	pop	r2
    1aa6:	08 95       	ret

00001aa8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	cf 92       	push	r12
    1ab8:	ef 92       	push	r14
    1aba:	ff 92       	push	r15
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	1f 92       	push	r1
    1ac6:	1f 92       	push	r1
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	6a 83       	std	Y+2, r22	; 0x02
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
    1ace:	41 15       	cp	r20, r1
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	29 f1       	breq	.+74     	; 0x1b1e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	60 81       	ld	r22, Z
    1ad8:	62 30       	cpi	r22, 0x02	; 2
    1ada:	08 f1       	brcs	.+66     	; 0x1b1e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    1adc:	49 01       	movw	r8, r18
    1ade:	2a 01       	movw	r4, r20
    1ae0:	3c 01       	movw	r6, r24
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	6c e1       	ldi	r22, 0x1C	; 28
    1ae6:	ab dc       	rcall	.-1706   	; 0x143e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    1ae8:	87 e0       	ldi	r24, 0x07	; 7
    1aea:	89 83       	std	Y+1, r24	; 0x01
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
    1aec:	a1 2c       	mov	r10, r1
    1aee:	c1 2c       	mov	r12, r1
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	7c 01       	movw	r14, r24
    1af6:	84 01       	movw	r16, r8
    1af8:	92 01       	movw	r18, r4
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	be 01       	movw	r22, r28
    1afe:	6e 5f       	subi	r22, 0xFE	; 254
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	c3 01       	movw	r24, r6
    1b04:	34 de       	rcall	.-920    	; 0x176e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
    1b06:	81 11       	cpse	r24, r1
    1b08:	0d c0       	rjmp	.+26     	; 0x1b24 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
    1b0a:	f4 01       	movw	r30, r8
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	41 f4       	brne	.+16     	; 0x1b22 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
											) {
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	99 81       	ldd	r25, Y+1	; 0x01
    1b16:	91 11       	cpse	r25, r1
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    1b1e:	84 e0       	ldi	r24, 0x04	; 4
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	cf 90       	pop	r12
    1b36:	af 90       	pop	r10
    1b38:	9f 90       	pop	r9
    1b3a:	8f 90       	pop	r8
    1b3c:	7f 90       	pop	r7
    1b3e:	6f 90       	pop	r6
    1b40:	5f 90       	pop	r5
    1b42:	4f 90       	pop	r4
    1b44:	08 95       	ret

00001b46 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
    1b46:	9a 01       	movw	r18, r20
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
    1b48:	ab 01       	movw	r20, r22
    1b4a:	66 e2       	ldi	r22, 0x26	; 38
    1b4c:	ad cf       	rjmp	.-166    	; 0x1aa8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00001b4e <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8c 01       	movw	r16, r24
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	8b 83       	std	Y+3, r24	; 0x03

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	64 e2       	ldi	r22, 0x24	; 36
    1b66:	c8 01       	movw	r24, r16
    1b68:	f4 db       	rcall	.-2072   	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	66 e2       	ldi	r22, 0x26	; 38
    1b6e:	c8 01       	movw	r24, r16
    1b70:	f0 db       	rcall	.-2080   	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    1b72:	46 e2       	ldi	r20, 0x26	; 38
    1b74:	68 e4       	ldi	r22, 0x48	; 72
    1b76:	c8 01       	movw	r24, r16
    1b78:	ec db       	rcall	.-2088   	; 0x1352 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    1b7a:	ae 01       	movw	r20, r28
    1b7c:	4d 5f       	subi	r20, 0xFD	; 253
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	be 01       	movw	r22, r28
    1b82:	6f 5f       	subi	r22, 0xFF	; 255
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	c8 01       	movw	r24, r16
    1b88:	de df       	rcall	.-68     	; 0x1b46 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    1b8a:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	99 23       	and	r25, r25
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    1b92:	92 30       	cpi	r25, 0x02	; 2
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1ba8:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1baa:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1bac:	f8 94       	cli
  if (!initialized) {
    1bae:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZN8SPIClass11initializedE>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	23 c0       	rjmp	.+70     	; 0x1bfc <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1bb6:	e9 ec       	ldi	r30, 0xC9	; 201
    1bb8:	f1 e0       	ldi	r31, 0x01	; 1
    1bba:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1bbc:	e3 e8       	ldi	r30, 0x83	; 131
    1bbe:	f1 e0       	ldi	r31, 0x01	; 1
    1bc0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1bc2:	e8 2f       	mov	r30, r24
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e2 5f       	subi	r30, 0xF2	; 242
    1bcc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bce:	a5 91       	lpm	r26, Z+
    1bd0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1bd2:	ec 91       	ld	r30, X
    1bd4:	e9 23       	and	r30, r25
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	85 e3       	ldi	r24, 0x35	; 53
    1bdc:	a9 d0       	rcall	.+338    	; 0x1d30 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	85 e3       	ldi	r24, 0x35	; 53
    1be2:	6a d0       	rcall	.+212    	; 0x1cb8 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1be4:	8c b5       	in	r24, 0x2c	; 44
    1be6:	80 61       	ori	r24, 0x10	; 16
    1be8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1bea:	8c b5       	in	r24, 0x2c	; 44
    1bec:	80 64       	ori	r24, 0x40	; 64
    1bee:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	84 e3       	ldi	r24, 0x34	; 52
    1bf4:	61 d0       	rcall	.+194    	; 0x1cb8 <pinMode>
    pinMode(MOSI, OUTPUT);
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	83 e3       	ldi	r24, 0x33	; 51
    1bfa:	5e d0       	rcall	.+188    	; 0x1cb8 <pinMode>
    1bfc:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <_ZN8SPIClass11initializedE>
    1c06:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    1c08:	cf 91       	pop	r28
}
    1c0a:	08 95       	ret

00001c0c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1c0c:	08 95       	ret

00001c0e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	fc 01       	movw	r30, r24
    1c12:	31 97       	sbiw	r30, 0x01	; 1
    1c14:	e2 31       	cpi	r30, 0x12	; 18
    1c16:	f1 05       	cpc	r31, r1
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <turnOffPWM+0xe>
    1c1a:	4d c0       	rjmp	.+154    	; 0x1cb6 <turnOffPWM+0xa8>
    1c1c:	88 27       	eor	r24, r24
    1c1e:	ee 58       	subi	r30, 0x8E	; 142
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	8f 4f       	sbci	r24, 0xFF	; 255
    1c24:	fd c0       	rjmp	.+506    	; 0x1e20 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1c26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c2a:	8f 77       	andi	r24, 0x7F	; 127
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1c2e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c32:	8f 7d       	andi	r24, 0xDF	; 223
    1c34:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c38:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1c3a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1c3e:	87 7f       	andi	r24, 0xF7	; 247
    1c40:	f9 cf       	rjmp	.-14     	; 0x1c34 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1c42:	84 b5       	in	r24, 0x24	; 36
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1c48:	84 b5       	in	r24, 0x24	; 36
    1c4a:	8f 7d       	andi	r24, 0xDF	; 223
    1c4c:	84 bd       	out	0x24, r24	; 36
    1c4e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1c50:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1c54:	8f 77       	andi	r24, 0x7F	; 127
    1c56:	03 c0       	rjmp	.+6      	; 0x1c5e <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1c58:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1c5c:	8f 7d       	andi	r24, 0xDF	; 223
    1c5e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1c62:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1c64:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c68:	8f 77       	andi	r24, 0x7F	; 127
    1c6a:	07 c0       	rjmp	.+14     	; 0x1c7a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1c6c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c70:	8f 7d       	andi	r24, 0xDF	; 223
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1c74:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c78:	87 7f       	andi	r24, 0xF7	; 247
    1c7a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1c7e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1c80:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c84:	8f 77       	andi	r24, 0x7F	; 127
    1c86:	07 c0       	rjmp	.+14     	; 0x1c96 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1c88:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c8c:	8f 7d       	andi	r24, 0xDF	; 223
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1c90:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c94:	87 7f       	andi	r24, 0xF7	; 247
    1c96:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1c9a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1c9c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ca0:	8f 77       	andi	r24, 0x7F	; 127
    1ca2:	07 c0       	rjmp	.+14     	; 0x1cb2 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1ca4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1ca8:	8f 7d       	andi	r24, 0xDF	; 223
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1cac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1cb0:	87 7f       	andi	r24, 0xF7	; 247
    1cb2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1cb6:	08 95       	ret

00001cb8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e2 5b       	subi	r30, 0xB2	; 178
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	ec 56       	subi	r30, 0x6C	; 108
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1cce:	88 23       	and	r24, r24
    1cd0:	61 f1       	breq	.+88     	; 0x1d2a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	fc 01       	movw	r30, r24
    1cda:	e2 5f       	subi	r30, 0xF2	; 242
    1cdc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cde:	c5 91       	lpm	r28, Z+
    1ce0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	ec 50       	subi	r30, 0x0C	; 12
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	a5 91       	lpm	r26, Z+
    1cea:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1cec:	61 11       	cpse	r22, r1
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1cf0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1cf2:	f8 94       	cli
		*reg &= ~bit;
    1cf4:	88 81       	ld	r24, Y
    1cf6:	20 95       	com	r18
    1cf8:	82 23       	and	r24, r18
    1cfa:	88 83       	st	Y, r24
		*out &= ~bit;
    1cfc:	ec 91       	ld	r30, X
    1cfe:	2e 23       	and	r18, r30
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1d02:	62 30       	cpi	r22, 0x02	; 2
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1d06:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d08:	f8 94       	cli
		*reg &= ~bit;
    1d0a:	88 81       	ld	r24, Y
    1d0c:	32 2f       	mov	r19, r18
    1d0e:	30 95       	com	r19
    1d10:	83 23       	and	r24, r19
    1d12:	88 83       	st	Y, r24
		*out |= bit;
    1d14:	ec 91       	ld	r30, X
    1d16:	2e 2b       	or	r18, r30
    1d18:	2c 93       	st	X, r18
		SREG = oldSREG;
    1d1a:	9f bf       	out	0x3f, r25	; 63
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1d1e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1d20:	f8 94       	cli
		*reg |= bit;
    1d22:	e8 81       	ld	r30, Y
    1d24:	2e 2b       	or	r18, r30
    1d26:	28 83       	st	Y, r18
		SREG = oldSREG;
    1d28:	8f bf       	out	0x3f, r24	; 63
	}
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	e8 5f       	subi	r30, 0xF8	; 248
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d42:	f9 01       	movw	r30, r18
    1d44:	e2 5b       	subi	r30, 0xB2	; 178
    1d46:	fe 4f       	sbci	r31, 0xFE	; 254
    1d48:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	ec 56       	subi	r30, 0x6C	; 108
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1d52:	cc 23       	and	r28, r28
    1d54:	b9 f0       	breq	.+46     	; 0x1d84 <digitalWrite+0x54>
    1d56:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d58:	81 11       	cpse	r24, r1
    1d5a:	59 df       	rcall	.-334    	; 0x1c0e <turnOffPWM>

	out = portOutputRegister(port);
    1d5c:	ec 2f       	mov	r30, r28
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	ee 0f       	add	r30, r30
    1d62:	ff 1f       	adc	r31, r31
    1d64:	ec 50       	subi	r30, 0x0C	; 12
    1d66:	fe 4f       	sbci	r31, 0xFE	; 254
    1d68:	a5 91       	lpm	r26, Z+
    1d6a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1d6c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1d6e:	f8 94       	cli

	if (val == LOW) {
    1d70:	11 11       	cpse	r17, r1
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <digitalWrite+0x4c>
		*out &= ~bit;
    1d74:	8c 91       	ld	r24, X
    1d76:	d0 95       	com	r29
    1d78:	d8 23       	and	r29, r24
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1d7c:	ec 91       	ld	r30, X
    1d7e:	de 2b       	or	r29, r30
    1d80:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1d82:	9f bf       	out	0x3f, r25	; 63
}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	08 95       	ret

00001d8c <digitalRead>:

int digitalRead(uint8_t pin)
{
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	f9 01       	movw	r30, r18
    1d96:	e8 5f       	subi	r30, 0xF8	; 248
    1d98:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	e2 5b       	subi	r30, 0xB2	; 178
    1da0:	fe 4f       	sbci	r31, 0xFE	; 254
    1da2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1da4:	f9 01       	movw	r30, r18
    1da6:	ec 56       	subi	r30, 0x6C	; 108
    1da8:	fe 4f       	sbci	r31, 0xFE	; 254
    1daa:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1dac:	cc 23       	and	r28, r28
    1dae:	89 f0       	breq	.+34     	; 0x1dd2 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1db0:	81 11       	cpse	r24, r1
    1db2:	2d df       	rcall	.-422    	; 0x1c0e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1db4:	ec 2f       	mov	r30, r28
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	e6 52       	subi	r30, 0x26	; 38
    1dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc0:	a5 91       	lpm	r26, Z+
    1dc2:	b4 91       	lpm	r27, Z
    1dc4:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1dc6:	ed 23       	and	r30, r29
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <digitalRead+0x4a>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <digitalRead+0x4a>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <__udivmodsi4>:
    1ddc:	a1 e2       	ldi	r26, 0x21	; 33
    1dde:	1a 2e       	mov	r1, r26
    1de0:	aa 1b       	sub	r26, r26
    1de2:	bb 1b       	sub	r27, r27
    1de4:	fd 01       	movw	r30, r26
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <__udivmodsi4_ep>

00001de8 <__udivmodsi4_loop>:
    1de8:	aa 1f       	adc	r26, r26
    1dea:	bb 1f       	adc	r27, r27
    1dec:	ee 1f       	adc	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	a2 17       	cp	r26, r18
    1df2:	b3 07       	cpc	r27, r19
    1df4:	e4 07       	cpc	r30, r20
    1df6:	f5 07       	cpc	r31, r21
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__udivmodsi4_ep>
    1dfa:	a2 1b       	sub	r26, r18
    1dfc:	b3 0b       	sbc	r27, r19
    1dfe:	e4 0b       	sbc	r30, r20
    1e00:	f5 0b       	sbc	r31, r21

00001e02 <__udivmodsi4_ep>:
    1e02:	66 1f       	adc	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	1a 94       	dec	r1
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <__udivmodsi4_loop>
    1e0e:	60 95       	com	r22
    1e10:	70 95       	com	r23
    1e12:	80 95       	com	r24
    1e14:	90 95       	com	r25
    1e16:	9b 01       	movw	r18, r22
    1e18:	ac 01       	movw	r20, r24
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	08 95       	ret

00001e20 <__tablejump2__>:
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	88 1f       	adc	r24, r24
    1e26:	8b bf       	out	0x3b, r24	; 59
    1e28:	07 90       	elpm	r0, Z+
    1e2a:	f6 91       	elpm	r31, Z
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	19 94       	eijmp

00001e30 <malloc>:
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	10 f4       	brcc	.+4      	; 0x1e42 <malloc+0x12>
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <__flp>
    1e46:	f0 91 2d 04 	lds	r31, 0x042D	; 0x80042d <__flp+0x1>
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	30 97       	sbiw	r30, 0x00	; 0
    1e54:	19 f1       	breq	.+70     	; 0x1e9c <malloc+0x6c>
    1e56:	40 81       	ld	r20, Z
    1e58:	51 81       	ldd	r21, Z+1	; 0x01
    1e5a:	02 81       	ldd	r16, Z+2	; 0x02
    1e5c:	13 81       	ldd	r17, Z+3	; 0x03
    1e5e:	48 17       	cp	r20, r24
    1e60:	59 07       	cpc	r21, r25
    1e62:	c8 f0       	brcs	.+50     	; 0x1e96 <malloc+0x66>
    1e64:	84 17       	cp	r24, r20
    1e66:	95 07       	cpc	r25, r21
    1e68:	69 f4       	brne	.+26     	; 0x1e84 <malloc+0x54>
    1e6a:	10 97       	sbiw	r26, 0x00	; 0
    1e6c:	31 f0       	breq	.+12     	; 0x1e7a <malloc+0x4a>
    1e6e:	12 96       	adiw	r26, 0x02	; 2
    1e70:	0c 93       	st	X, r16
    1e72:	12 97       	sbiw	r26, 0x02	; 2
    1e74:	13 96       	adiw	r26, 0x03	; 3
    1e76:	1c 93       	st	X, r17
    1e78:	27 c0       	rjmp	.+78     	; 0x1ec8 <malloc+0x98>
    1e7a:	00 93 2c 04 	sts	0x042C, r16	; 0x80042c <__flp>
    1e7e:	10 93 2d 04 	sts	0x042D, r17	; 0x80042d <__flp+0x1>
    1e82:	22 c0       	rjmp	.+68     	; 0x1ec8 <malloc+0x98>
    1e84:	21 15       	cp	r18, r1
    1e86:	31 05       	cpc	r19, r1
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <malloc+0x60>
    1e8a:	42 17       	cp	r20, r18
    1e8c:	53 07       	cpc	r21, r19
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <malloc+0x66>
    1e90:	9a 01       	movw	r18, r20
    1e92:	bd 01       	movw	r22, r26
    1e94:	ef 01       	movw	r28, r30
    1e96:	df 01       	movw	r26, r30
    1e98:	f8 01       	movw	r30, r16
    1e9a:	db cf       	rjmp	.-74     	; 0x1e52 <malloc+0x22>
    1e9c:	21 15       	cp	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	f9 f0       	breq	.+62     	; 0x1ee0 <malloc+0xb0>
    1ea2:	28 1b       	sub	r18, r24
    1ea4:	39 0b       	sbc	r19, r25
    1ea6:	24 30       	cpi	r18, 0x04	; 4
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	80 f4       	brcc	.+32     	; 0x1ecc <malloc+0x9c>
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	61 15       	cp	r22, r1
    1eb2:	71 05       	cpc	r23, r1
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <malloc+0x8e>
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	93 83       	std	Z+3, r25	; 0x03
    1eba:	82 83       	std	Z+2, r24	; 0x02
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <malloc+0x96>
    1ebe:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <__flp+0x1>
    1ec2:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <__flp>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	32 96       	adiw	r30, 0x02	; 2
    1eca:	44 c0       	rjmp	.+136    	; 0x1f54 <malloc+0x124>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	81 93       	st	Z+, r24
    1ed4:	91 93       	st	Z+, r25
    1ed6:	22 50       	subi	r18, 0x02	; 2
    1ed8:	31 09       	sbc	r19, r1
    1eda:	39 83       	std	Y+1, r19	; 0x01
    1edc:	28 83       	st	Y, r18
    1ede:	3a c0       	rjmp	.+116    	; 0x1f54 <malloc+0x124>
    1ee0:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <__brkval>
    1ee4:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <__brkval+0x1>
    1ee8:	23 2b       	or	r18, r19
    1eea:	41 f4       	brne	.+16     	; 0x1efc <malloc+0xcc>
    1eec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1ef0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1ef4:	30 93 2b 04 	sts	0x042B, r19	; 0x80042b <__brkval+0x1>
    1ef8:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <__brkval>
    1efc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1f00:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1f04:	21 15       	cp	r18, r1
    1f06:	31 05       	cpc	r19, r1
    1f08:	41 f4       	brne	.+16     	; 0x1f1a <malloc+0xea>
    1f0a:	2d b7       	in	r18, 0x3d	; 61
    1f0c:	3e b7       	in	r19, 0x3e	; 62
    1f0e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1f12:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1f16:	24 1b       	sub	r18, r20
    1f18:	35 0b       	sbc	r19, r21
    1f1a:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <__brkval>
    1f1e:	f0 91 2b 04 	lds	r31, 0x042B	; 0x80042b <__brkval+0x1>
    1f22:	e2 17       	cp	r30, r18
    1f24:	f3 07       	cpc	r31, r19
    1f26:	a0 f4       	brcc	.+40     	; 0x1f50 <malloc+0x120>
    1f28:	2e 1b       	sub	r18, r30
    1f2a:	3f 0b       	sbc	r19, r31
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	78 f0       	brcs	.+30     	; 0x1f50 <malloc+0x120>
    1f32:	ac 01       	movw	r20, r24
    1f34:	4e 5f       	subi	r20, 0xFE	; 254
    1f36:	5f 4f       	sbci	r21, 0xFF	; 255
    1f38:	24 17       	cp	r18, r20
    1f3a:	35 07       	cpc	r19, r21
    1f3c:	48 f0       	brcs	.+18     	; 0x1f50 <malloc+0x120>
    1f3e:	4e 0f       	add	r20, r30
    1f40:	5f 1f       	adc	r21, r31
    1f42:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <__brkval+0x1>
    1f46:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <__brkval>
    1f4a:	81 93       	st	Z+, r24
    1f4c:	91 93       	st	Z+, r25
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <malloc+0x124>
    1f50:	e0 e0       	ldi	r30, 0x00	; 0
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	cf 01       	movw	r24, r30
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <free>:
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <free+0xa>
    1f68:	81 c0       	rjmp	.+258    	; 0x206c <free+0x10c>
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	32 97       	sbiw	r30, 0x02	; 2
    1f6e:	13 82       	std	Z+3, r1	; 0x03
    1f70:	12 82       	std	Z+2, r1	; 0x02
    1f72:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <__flp>
    1f76:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <__flp+0x1>
    1f7a:	10 97       	sbiw	r26, 0x00	; 0
    1f7c:	81 f4       	brne	.+32     	; 0x1f9e <free+0x3e>
    1f7e:	20 81       	ld	r18, Z
    1f80:	31 81       	ldd	r19, Z+1	; 0x01
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <__brkval>
    1f8a:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <__brkval+0x1>
    1f8e:	28 17       	cp	r18, r24
    1f90:	39 07       	cpc	r19, r25
    1f92:	51 f5       	brne	.+84     	; 0x1fe8 <free+0x88>
    1f94:	f0 93 2b 04 	sts	0x042B, r31	; 0x80042b <__brkval+0x1>
    1f98:	e0 93 2a 04 	sts	0x042A, r30	; 0x80042a <__brkval>
    1f9c:	67 c0       	rjmp	.+206    	; 0x206c <free+0x10c>
    1f9e:	ed 01       	movw	r28, r26
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	ce 17       	cp	r28, r30
    1fa6:	df 07       	cpc	r29, r31
    1fa8:	40 f4       	brcc	.+16     	; 0x1fba <free+0x5a>
    1faa:	4a 81       	ldd	r20, Y+2	; 0x02
    1fac:	5b 81       	ldd	r21, Y+3	; 0x03
    1fae:	9e 01       	movw	r18, r28
    1fb0:	41 15       	cp	r20, r1
    1fb2:	51 05       	cpc	r21, r1
    1fb4:	f1 f0       	breq	.+60     	; 0x1ff2 <free+0x92>
    1fb6:	ea 01       	movw	r28, r20
    1fb8:	f5 cf       	rjmp	.-22     	; 0x1fa4 <free+0x44>
    1fba:	d3 83       	std	Z+3, r29	; 0x03
    1fbc:	c2 83       	std	Z+2, r28	; 0x02
    1fbe:	40 81       	ld	r20, Z
    1fc0:	51 81       	ldd	r21, Z+1	; 0x01
    1fc2:	84 0f       	add	r24, r20
    1fc4:	95 1f       	adc	r25, r21
    1fc6:	c8 17       	cp	r28, r24
    1fc8:	d9 07       	cpc	r29, r25
    1fca:	59 f4       	brne	.+22     	; 0x1fe2 <free+0x82>
    1fcc:	88 81       	ld	r24, Y
    1fce:	99 81       	ldd	r25, Y+1	; 0x01
    1fd0:	84 0f       	add	r24, r20
    1fd2:	95 1f       	adc	r25, r21
    1fd4:	02 96       	adiw	r24, 0x02	; 2
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	93 83       	std	Z+3, r25	; 0x03
    1fe0:	82 83       	std	Z+2, r24	; 0x02
    1fe2:	21 15       	cp	r18, r1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <free+0x92>
    1fe8:	f0 93 2d 04 	sts	0x042D, r31	; 0x80042d <__flp+0x1>
    1fec:	e0 93 2c 04 	sts	0x042C, r30	; 0x80042c <__flp>
    1ff0:	3d c0       	rjmp	.+122    	; 0x206c <free+0x10c>
    1ff2:	e9 01       	movw	r28, r18
    1ff4:	fb 83       	std	Y+3, r31	; 0x03
    1ff6:	ea 83       	std	Y+2, r30	; 0x02
    1ff8:	49 91       	ld	r20, Y+
    1ffa:	59 91       	ld	r21, Y+
    1ffc:	c4 0f       	add	r28, r20
    1ffe:	d5 1f       	adc	r29, r21
    2000:	ec 17       	cp	r30, r28
    2002:	fd 07       	cpc	r31, r29
    2004:	61 f4       	brne	.+24     	; 0x201e <free+0xbe>
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	84 0f       	add	r24, r20
    200c:	95 1f       	adc	r25, r21
    200e:	02 96       	adiw	r24, 0x02	; 2
    2010:	e9 01       	movw	r28, r18
    2012:	99 83       	std	Y+1, r25	; 0x01
    2014:	88 83       	st	Y, r24
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	9b 83       	std	Y+3, r25	; 0x03
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	e0 e0       	ldi	r30, 0x00	; 0
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	12 96       	adiw	r26, 0x02	; 2
    2024:	8d 91       	ld	r24, X+
    2026:	9c 91       	ld	r25, X
    2028:	13 97       	sbiw	r26, 0x03	; 3
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	19 f0       	breq	.+6      	; 0x2034 <free+0xd4>
    202e:	fd 01       	movw	r30, r26
    2030:	dc 01       	movw	r26, r24
    2032:	f7 cf       	rjmp	.-18     	; 0x2022 <free+0xc2>
    2034:	8d 91       	ld	r24, X+
    2036:	9c 91       	ld	r25, X
    2038:	11 97       	sbiw	r26, 0x01	; 1
    203a:	9d 01       	movw	r18, r26
    203c:	2e 5f       	subi	r18, 0xFE	; 254
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <__brkval>
    2048:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <__brkval+0x1>
    204c:	28 17       	cp	r18, r24
    204e:	39 07       	cpc	r19, r25
    2050:	69 f4       	brne	.+26     	; 0x206c <free+0x10c>
    2052:	30 97       	sbiw	r30, 0x00	; 0
    2054:	29 f4       	brne	.+10     	; 0x2060 <free+0x100>
    2056:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <__flp+0x1>
    205a:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <__flp>
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <free+0x104>
    2060:	13 82       	std	Z+3, r1	; 0x03
    2062:	12 82       	std	Z+2, r1	; 0x02
    2064:	b0 93 2b 04 	sts	0x042B, r27	; 0x80042b <__brkval+0x1>
    2068:	a0 93 2a 04 	sts	0x042A, r26	; 0x80042a <__brkval>
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <realloc>:
    2072:	6f 92       	push	r6
    2074:	7f 92       	push	r7
    2076:	8f 92       	push	r8
    2078:	9f 92       	push	r9
    207a:	af 92       	push	r10
    207c:	bf 92       	push	r11
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	81 f4       	brne	.+32     	; 0x20b2 <realloc+0x40>
    2092:	cb 01       	movw	r24, r22
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	bf ce       	rjmp	.-642    	; 0x1e30 <malloc>
    20b2:	fc 01       	movw	r30, r24
    20b4:	e6 0f       	add	r30, r22
    20b6:	f7 1f       	adc	r31, r23
    20b8:	9c 01       	movw	r18, r24
    20ba:	22 50       	subi	r18, 0x02	; 2
    20bc:	31 09       	sbc	r19, r1
    20be:	e2 17       	cp	r30, r18
    20c0:	f3 07       	cpc	r31, r19
    20c2:	08 f4       	brcc	.+2      	; 0x20c6 <realloc+0x54>
    20c4:	a5 c0       	rjmp	.+330    	; 0x2210 <__stack+0x11>
    20c6:	ec 01       	movw	r28, r24
    20c8:	d9 01       	movw	r26, r18
    20ca:	0d 91       	ld	r16, X+
    20cc:	1c 91       	ld	r17, X
    20ce:	11 97       	sbiw	r26, 0x01	; 1
    20d0:	06 17       	cp	r16, r22
    20d2:	17 07       	cpc	r17, r23
    20d4:	a8 f0       	brcs	.+42     	; 0x2100 <realloc+0x8e>
    20d6:	05 30       	cpi	r16, 0x05	; 5
    20d8:	11 05       	cpc	r17, r1
    20da:	08 f4       	brcc	.+2      	; 0x20de <realloc+0x6c>
    20dc:	97 c0       	rjmp	.+302    	; 0x220c <__stack+0xd>
    20de:	c8 01       	movw	r24, r16
    20e0:	04 97       	sbiw	r24, 0x04	; 4
    20e2:	86 17       	cp	r24, r22
    20e4:	97 07       	cpc	r25, r23
    20e6:	08 f4       	brcc	.+2      	; 0x20ea <realloc+0x78>
    20e8:	91 c0       	rjmp	.+290    	; 0x220c <__stack+0xd>
    20ea:	02 50       	subi	r16, 0x02	; 2
    20ec:	11 09       	sbc	r17, r1
    20ee:	06 1b       	sub	r16, r22
    20f0:	17 0b       	sbc	r17, r23
    20f2:	01 93       	st	Z+, r16
    20f4:	11 93       	st	Z+, r17
    20f6:	6d 93       	st	X+, r22
    20f8:	7c 93       	st	X, r23
    20fa:	cf 01       	movw	r24, r30
    20fc:	31 df       	rcall	.-414    	; 0x1f60 <free>
    20fe:	86 c0       	rjmp	.+268    	; 0x220c <__stack+0xd>
    2100:	5b 01       	movw	r10, r22
    2102:	a0 1a       	sub	r10, r16
    2104:	b1 0a       	sbc	r11, r17
    2106:	4c 01       	movw	r8, r24
    2108:	80 0e       	add	r8, r16
    210a:	91 1e       	adc	r9, r17
    210c:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <__flp>
    2110:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <__flp+0x1>
    2114:	61 2c       	mov	r6, r1
    2116:	71 2c       	mov	r7, r1
    2118:	e1 2c       	mov	r14, r1
    211a:	f1 2c       	mov	r15, r1
    211c:	10 97       	sbiw	r26, 0x00	; 0
    211e:	09 f4       	brne	.+2      	; 0x2122 <realloc+0xb0>
    2120:	46 c0       	rjmp	.+140    	; 0x21ae <realloc+0x13c>
    2122:	8d 91       	ld	r24, X+
    2124:	9c 91       	ld	r25, X
    2126:	11 97       	sbiw	r26, 0x01	; 1
    2128:	a8 15       	cp	r26, r8
    212a:	b9 05       	cpc	r27, r9
    212c:	b1 f5       	brne	.+108    	; 0x219a <realloc+0x128>
    212e:	6c 01       	movw	r12, r24
    2130:	42 e0       	ldi	r20, 0x02	; 2
    2132:	c4 0e       	add	r12, r20
    2134:	d1 1c       	adc	r13, r1
    2136:	ca 14       	cp	r12, r10
    2138:	db 04       	cpc	r13, r11
    213a:	78 f1       	brcs	.+94     	; 0x219a <realloc+0x128>
    213c:	4c 01       	movw	r8, r24
    213e:	8a 18       	sub	r8, r10
    2140:	9b 08       	sbc	r9, r11
    2142:	64 01       	movw	r12, r8
    2144:	42 e0       	ldi	r20, 0x02	; 2
    2146:	c4 0e       	add	r12, r20
    2148:	d1 1c       	adc	r13, r1
    214a:	12 96       	adiw	r26, 0x02	; 2
    214c:	bc 90       	ld	r11, X
    214e:	12 97       	sbiw	r26, 0x02	; 2
    2150:	13 96       	adiw	r26, 0x03	; 3
    2152:	ac 91       	ld	r26, X
    2154:	b5 e0       	ldi	r27, 0x05	; 5
    2156:	cb 16       	cp	r12, r27
    2158:	d1 04       	cpc	r13, r1
    215a:	40 f0       	brcs	.+16     	; 0x216c <realloc+0xfa>
    215c:	b2 82       	std	Z+2, r11	; 0x02
    215e:	a3 83       	std	Z+3, r26	; 0x03
    2160:	91 82       	std	Z+1, r9	; 0x01
    2162:	80 82       	st	Z, r8
    2164:	d9 01       	movw	r26, r18
    2166:	6d 93       	st	X+, r22
    2168:	7c 93       	st	X, r23
    216a:	09 c0       	rjmp	.+18     	; 0x217e <realloc+0x10c>
    216c:	0e 5f       	subi	r16, 0xFE	; 254
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	80 0f       	add	r24, r16
    2172:	91 1f       	adc	r25, r17
    2174:	f9 01       	movw	r30, r18
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	eb 2d       	mov	r30, r11
    217c:	fa 2f       	mov	r31, r26
    217e:	e1 14       	cp	r14, r1
    2180:	f1 04       	cpc	r15, r1
    2182:	31 f0       	breq	.+12     	; 0x2190 <realloc+0x11e>
    2184:	d7 01       	movw	r26, r14
    2186:	13 96       	adiw	r26, 0x03	; 3
    2188:	fc 93       	st	X, r31
    218a:	ee 93       	st	-X, r30
    218c:	12 97       	sbiw	r26, 0x02	; 2
    218e:	3e c0       	rjmp	.+124    	; 0x220c <__stack+0xd>
    2190:	f0 93 2d 04 	sts	0x042D, r31	; 0x80042d <__flp+0x1>
    2194:	e0 93 2c 04 	sts	0x042C, r30	; 0x80042c <__flp>
    2198:	39 c0       	rjmp	.+114    	; 0x220c <__stack+0xd>
    219a:	68 16       	cp	r6, r24
    219c:	79 06       	cpc	r7, r25
    219e:	08 f4       	brcc	.+2      	; 0x21a2 <realloc+0x130>
    21a0:	3c 01       	movw	r6, r24
    21a2:	7d 01       	movw	r14, r26
    21a4:	12 96       	adiw	r26, 0x02	; 2
    21a6:	0d 90       	ld	r0, X+
    21a8:	bc 91       	ld	r27, X
    21aa:	a0 2d       	mov	r26, r0
    21ac:	b7 cf       	rjmp	.-146    	; 0x211c <realloc+0xaa>
    21ae:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <__brkval>
    21b2:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <__brkval+0x1>
    21b6:	88 16       	cp	r8, r24
    21b8:	99 06       	cpc	r9, r25
    21ba:	e1 f4       	brne	.+56     	; 0x21f4 <realloc+0x182>
    21bc:	66 16       	cp	r6, r22
    21be:	77 06       	cpc	r7, r23
    21c0:	c8 f4       	brcc	.+50     	; 0x21f4 <realloc+0x182>
    21c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    21c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	41 f4       	brne	.+16     	; 0x21de <realloc+0x16c>
    21ce:	8d b7       	in	r24, 0x3d	; 61
    21d0:	9e b7       	in	r25, 0x3e	; 62
    21d2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    21d6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    21da:	84 1b       	sub	r24, r20
    21dc:	95 0b       	sbc	r25, r21
    21de:	e8 17       	cp	r30, r24
    21e0:	f9 07       	cpc	r31, r25
    21e2:	b0 f4       	brcc	.+44     	; 0x2210 <__stack+0x11>
    21e4:	f0 93 2b 04 	sts	0x042B, r31	; 0x80042b <__brkval+0x1>
    21e8:	e0 93 2a 04 	sts	0x042A, r30	; 0x80042a <__brkval>
    21ec:	f9 01       	movw	r30, r18
    21ee:	71 83       	std	Z+1, r23	; 0x01
    21f0:	60 83       	st	Z, r22
    21f2:	0c c0       	rjmp	.+24     	; 0x220c <__stack+0xd>
    21f4:	cb 01       	movw	r24, r22
    21f6:	1c de       	rcall	.-968    	; 0x1e30 <malloc>
    21f8:	7c 01       	movw	r14, r24
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	49 f0       	breq	.+18     	; 0x2210 <__stack+0x11>
    21fe:	a8 01       	movw	r20, r16
    2200:	be 01       	movw	r22, r28
    2202:	1f d0       	rcall	.+62     	; 0x2242 <memcpy>
    2204:	ce 01       	movw	r24, r28
    2206:	ac de       	rcall	.-680    	; 0x1f60 <free>
    2208:	c7 01       	movw	r24, r14
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <__stack+0x15>
    220c:	ce 01       	movw	r24, r28
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <__stack+0x15>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	bf 90       	pop	r11
    2226:	af 90       	pop	r10
    2228:	9f 90       	pop	r9
    222a:	8f 90       	pop	r8
    222c:	7f 90       	pop	r7
    222e:	6f 90       	pop	r6
    2230:	08 95       	ret

00002232 <toupper>:
    2232:	91 11       	cpse	r25, r1
    2234:	08 95       	ret
    2236:	81 56       	subi	r24, 0x61	; 97
    2238:	8a 51       	subi	r24, 0x1A	; 26
    223a:	08 f4       	brcc	.+2      	; 0x223e <toupper+0xc>
    223c:	80 52       	subi	r24, 0x20	; 32
    223e:	85 58       	subi	r24, 0x85	; 133
    2240:	08 95       	ret

00002242 <memcpy>:
    2242:	fb 01       	movw	r30, r22
    2244:	dc 01       	movw	r26, r24
    2246:	02 c0       	rjmp	.+4      	; 0x224c <memcpy+0xa>
    2248:	01 90       	ld	r0, Z+
    224a:	0d 92       	st	X+, r0
    224c:	41 50       	subi	r20, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	d8 f7       	brcc	.-10     	; 0x2248 <memcpy+0x6>
    2252:	08 95       	ret

00002254 <strcmp>:
    2254:	fb 01       	movw	r30, r22
    2256:	dc 01       	movw	r26, r24
    2258:	8d 91       	ld	r24, X+
    225a:	01 90       	ld	r0, Z+
    225c:	80 19       	sub	r24, r0
    225e:	01 10       	cpse	r0, r1
    2260:	d9 f3       	breq	.-10     	; 0x2258 <strcmp+0x4>
    2262:	99 0b       	sbc	r25, r25
    2264:	08 95       	ret

00002266 <strcpy>:
    2266:	fb 01       	movw	r30, r22
    2268:	dc 01       	movw	r26, r24
    226a:	01 90       	ld	r0, Z+
    226c:	0d 92       	st	X+, r0
    226e:	00 20       	and	r0, r0
    2270:	e1 f7       	brne	.-8      	; 0x226a <strcpy+0x4>
    2272:	08 95       	ret

00002274 <utoa>:
    2274:	45 32       	cpi	r20, 0x25	; 37
    2276:	51 05       	cpc	r21, r1
    2278:	18 f4       	brcc	.+6      	; 0x2280 <utoa+0xc>
    227a:	42 30       	cpi	r20, 0x02	; 2
    227c:	08 f0       	brcs	.+2      	; 0x2280 <utoa+0xc>
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <__utoa_ncheck>
    2280:	fb 01       	movw	r30, r22
    2282:	10 82       	st	Z, r1
    2284:	cb 01       	movw	r24, r22
    2286:	08 95       	ret

00002288 <__utoa_ncheck>:
    2288:	bb 27       	eor	r27, r27

0000228a <__utoa_common>:
    228a:	fb 01       	movw	r30, r22
    228c:	55 27       	eor	r21, r21
    228e:	aa 27       	eor	r26, r26
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	aa 1f       	adc	r26, r26
    2296:	a4 17       	cp	r26, r20
    2298:	10 f0       	brcs	.+4      	; 0x229e <__utoa_common+0x14>
    229a:	a4 1b       	sub	r26, r20
    229c:	83 95       	inc	r24
    229e:	50 51       	subi	r21, 0x10	; 16
    22a0:	b9 f7       	brne	.-18     	; 0x2290 <__utoa_common+0x6>
    22a2:	a0 5d       	subi	r26, 0xD0	; 208
    22a4:	aa 33       	cpi	r26, 0x3A	; 58
    22a6:	08 f0       	brcs	.+2      	; 0x22aa <__utoa_common+0x20>
    22a8:	a9 5d       	subi	r26, 0xD9	; 217
    22aa:	a1 93       	st	Z+, r26
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	79 f7       	brne	.-34     	; 0x228e <__utoa_common+0x4>
    22b0:	b1 11       	cpse	r27, r1
    22b2:	b1 93       	st	Z+, r27
    22b4:	11 92       	st	Z+, r1
    22b6:	cb 01       	movw	r24, r22
    22b8:	00 c0       	rjmp	.+0      	; 0x22ba <strrev>

000022ba <strrev>:
    22ba:	dc 01       	movw	r26, r24
    22bc:	fc 01       	movw	r30, r24
    22be:	67 2f       	mov	r22, r23
    22c0:	71 91       	ld	r23, Z+
    22c2:	77 23       	and	r23, r23
    22c4:	e1 f7       	brne	.-8      	; 0x22be <strrev+0x4>
    22c6:	32 97       	sbiw	r30, 0x02	; 2
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <strrev+0x18>
    22ca:	7c 91       	ld	r23, X
    22cc:	6d 93       	st	X+, r22
    22ce:	70 83       	st	Z, r23
    22d0:	62 91       	ld	r22, -Z
    22d2:	ae 17       	cp	r26, r30
    22d4:	bf 07       	cpc	r27, r31
    22d6:	c8 f3       	brcs	.-14     	; 0x22ca <strrev+0x10>
    22d8:	08 95       	ret

000022da <_exit>:
    22da:	f8 94       	cli

000022dc <__stop_program>:
    22dc:	ff cf       	rjmp	.-2      	; 0x22dc <__stop_program>
